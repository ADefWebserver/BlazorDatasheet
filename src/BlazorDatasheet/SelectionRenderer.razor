@using System.Text
@using BlazorDatasheet.Data
@using BlazorDatasheet.Render
@using Range = BlazorDatasheet.Data.Range
@using System.ComponentModel

@if (SelectionRange != null && !Hidden)
{
    if (HighlightCell)
    {
        var ranges = SelectionRange.Break(HighlightedCell);
        foreach (var range in ranges)
        {
            <div class="selection-base"
                 style="@GetSizeStyleString(range, 0, true)"/>
        }
    }
    <div class="selection-base"
         style="@GetSizeStyleString(SelectionRange, 2, !HighlightCell)"/>
}


<style>
    .selection-base{
        position: absolute;
        pointer-events: none;
    }
</style>

@code {

    [Parameter, EditorRequired]
    public CellLayoutProvider CellLayoutProvider { get; set; }

    [Parameter, EditorRequired]
    public IFixedSizeRange SelectionRange { get; set; }

    [Parameter, EditorRequired]
    public bool Hidden { get; set; }

    [Parameter]
    public CellPosition HighlightedCell { get; set; }

    [Parameter, EditorRequired]
    public bool HighlightCell { get; set; }

    private string GetSizeStyleString(IFixedSizeRange? range, int borderThickness, bool bgVisible)
    {
        if (range == null)
            return "";

        var strBuilder = new StringBuilder();

        var left = CellLayoutProvider.ComputeLeftPosition(range) - borderThickness;
        var top = CellLayoutProvider.ComputeTopPosition(range) - borderThickness;
        var w = CellLayoutProvider.ComputeWidth(range) + borderThickness * 2 - borderThickness;
        var h = CellLayoutProvider.ComputeHeight(range) + borderThickness * 2 - borderThickness;

        strBuilder.Append($"left:{left + 1}px;");
        strBuilder.Append($"top:{top + 1}px;");
        strBuilder.Append($"width:{w}px;");
        strBuilder.Append($"height:{h}px;");

        if (borderThickness != 0)
        {
            strBuilder.Append($"border-width: {borderThickness}px;");
            strBuilder.Append($"border-color:var(--selection-border-color);");
            strBuilder.Append($"border-style:solid;");
        }

        if (bgVisible)
        {
            strBuilder.Append($"background:var(--selection-bg-color);");
        }


        var style = strBuilder.ToString();
        return style;
    }

}