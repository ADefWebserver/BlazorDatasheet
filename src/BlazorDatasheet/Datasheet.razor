@using BlazorDatasheet.Data
@using System.Text.Encodings.Web
@using BlazorDatasheet.Interfaces
@using Microsoft.JSInterop;
@inject IJSRuntime JS
@using BlazorDatasheet.Render;
@implements IDisposable;
@using Microsoft.AspNetCore.Components.Web.Virtualization;
@using System.Collections.Immutable
@using System.Reflection
@using System.Text
@using BlazorDatasheet.DataStructures.Util
@using BlazorDatasheet.Util
@using Microsoft.Extensions.Primitives
<div
    style="@GetContainerStyleString()"
    theme="@Theme"
    class="@GetContainerClassString()"
    @onmouseover="() => IsMouseInsideSheet = true"
    @onmouseout="() => IsMouseInsideSheet = false">
    <!-- entire size of sheet to force scrollbars-->
    <div id="sheet_whole"
         @ref="Inner"
         style="position:absolute; top:0; pointer-events: none; left:0;height:@GetSheetHeightInPx()px; width:@GetSheetWidthInPx()px;z-index: 0">
    </div>

    @if (Sheet != null)
    {
        <!-- this div is where the rows/cols are rendered. If we fix the cells to the left/top
        then this grid is fixed to the left/top of the container and cells are rendered with a 0-based rendering
        using the cell layout provider. Otherwise, this is positioned at (0,0) (relative to its parent) -->
        <div id="fixed">
            <!-- Column headers -->
            <div style="display: flex; flex-direction: column;">

                @if (Sheet?.ShowColumnHeadings == true)
                {
                    <div style="display: flex; flex-direction: row;" class="sheet-row column-head @(StickyHeadings ? "col-sticky" : "")">
                        @if (Sheet.ShowRowHeadings)
                        {
                            <!-- the little bit outside to the left of first col header -->
                            <div class="sheet-cell row-head"
                                 style="@CssUtil.GetCellWidthStyles(-1, 1, Sheet.LayoutProvider); display: inline-block;@(StickyHeadings ? "position: sticky; left: 0; z-index:2;" : "")">
                                <div class="cell"></div>
                            </div>
                        }
                        <div id="filler-left-0" style="min-width: @(Sheet.LayoutProvider.ComputeWidth(0, ColStart))px; display: block; float: left; height: 1px;"></div>

                        <ColumnHeadingsRenderer
                            NVisibleCols="NVisibleCols"
                            VisibleColStart="ColStart"
                            OnMouseUp="@(e => HandleCellMouseUp(-1, e.Column, e.Args))"
                            OnMouseOver="@(e => HandleCellMouseOver(-1, e.Column, e.Args))"
                            OnMouseDown="@(e => HandleColumnHeaderMouseDown(e.Column, e.Args))"
                            FixScrollToCellEdge="FixScrollToCellEdge"
                            CellLayoutProvider="Sheet.LayoutProvider"
                            Sheet="Sheet"/>

                    </div>
                }

                <div id="filler-top" style="height: @(Sheet.LayoutProvider.ComputeHeight(RowStart))px; width:1px; display: block;"></div>

                <div id="last-row" style="display: flex; flex-direction: row;">

                    @if (Sheet.ShowRowHeadings)
                    {
                        <div id="rowHeadings" class="@(StickyHeadings ? "row-sticky" : "")">
                            <RowHeadingsRenderer
                                NVisibleRows="NVisibleRows"
                                VisibleRowStart="RowStart"
                                OnMouseDown="e => HandleRowHeaderMouseDown(e.RowIndex, e.MouseEventArgs)"
                                OnMouseOver="e => HandleCellMouseOver(e.RowIndex, -1, e.MouseEventArgs)"
                                OnMouseUp="e => HandleCellMouseUp(e.RowIndex, -1, e.MouseEventArgs)"
                                FixScrollToCellEdge="FixScrollToCellEdge"
                                Sheet="Sheet"
                                CellLayoutProvider="Sheet.LayoutProvider"/>
                        </div>
                    }

                    <div id="filler-left" style="min-width: @(Sheet.LayoutProvider.ComputeWidth(0, ColStart))px; height: 1px;"></div>

                    <div id="sheet" style="display: flex; flex-direction: column">
                        @for (int rowIndex = RowStart; rowIndex < (RowStart + NVisibleRows); rowIndex++)
                        {
                            <div class="sheet-row" @key="rowIndex">
                                @for (int j = ColStart; j < (ColStart + NVisibleCols); j++)
                                {
                                    var row = rowIndex;
                                    var col = j;
                                    var cell = Sheet.GetCell(row, col);

                                    <div
                                        @key="col"
                                        @onmousedown="e => HandleCellMouseDown(row, col, e)"
                                        @onmouseover="e => HandleCellMouseOver(row, col, e)"
                                        @ondblclick="e => HandleCellDoubleClick(row, col, e)"
                                        class="sheet-cell"
                                        style="@CssUtil.GetCellWidthStyles(cell.Col, 1, Sheet.LayoutProvider) 
                                                        @($"height:{Sheet.LayoutProvider.ComputeHeight(1)}px;")"
                                        @onmouseup="e => HandleCellMouseUp(row, col, e)">
                                        <CellRenderer
                                            Cell="cell"
                                            Sheet="Sheet"
                                            IsDirty="SheetIsDirty || DirtyCells.Contains((row, col))">
                                            <ItemTemplate>
                                                <DynamicComponent
                                                    Type="@getCellRendererType(cell.Type)"
                                                    Parameters="@getCellRendererParameters(Sheet, cell, row, col)">
                                                </DynamicComponent>
                                            </ItemTemplate>
                                        </CellRenderer>
                                    </div>
                                }
                            </div>
                        }
                    </div>

                    <!-- Merged cells -->
                    @if (Sheet.Merges.Any() && this.ViewportRegion is not null)
                    {
                        var mergesInView = Sheet.Merges.Store.GetRegionsOverlapping(this.ViewportRegion);
                        @foreach (var merge in mergesInView)
                        {
                            var row = merge.Region.Start.Row;
                            var col = merge.Region.Start.Col;
                            var cell = Sheet.GetCell(row, col);

                            <CellRenderer
                                @onmousedown="e => HandleCellMouseDown(row, col, e)"
                                @onmouseover="e => HandleCellMouseOver(row, col, e)"
                                @ondblclick="e => HandleCellDoubleClick(row, col, e)"
                                @onmouseup="e => HandleCellMouseUp(row, col, e)"
                                ColSpan="merge.Region.Width"
                                RowSpan="merge.Region.Height"
                                IsAbsolutePositioning="true"
                                Cell="cell"
                                Sheet="Sheet"
                                IsDirty="SheetIsDirty || DirtyCells.Contains((row, col))">
                                <ItemTemplate>
                                    <DynamicComponent
                                        Type="@getCellRendererType(cell.Type)"
                                        Parameters="@getCellRendererParameters(Sheet, cell, row, col)">
                                    </DynamicComponent>
                                </ItemTemplate>
                            </CellRenderer>
                        }
                    }

                    <EditorOverlayRenderer
                        @ref="_editorManager"
                        FixScrollToCellEdge="FixScrollToCellEdge"
                        Sheet="Sheet"
                        CellLayoutProvider="Sheet.LayoutProvider"/>

                    <SelectionRenderer
                        Sheet="Sheet"
                        FixScrollToCellEdge="FixScrollToCellEdge"
                        CellLayoutProvider="Sheet.LayoutProvider"/>
                </div>
            </div>
        </div>
    }
</div>