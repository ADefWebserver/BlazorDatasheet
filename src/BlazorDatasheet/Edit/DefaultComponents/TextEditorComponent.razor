@inherits BaseEditor
@using BlazorDatasheet.Util
@using BlazorDatasheet.Core.Interfaces
@using BlazorDatasheet.Core.Data
@using BlazorDatasheet.Core.Edit
@using BlazorDatasheet.DataStructures.Geometry
@using BlazorDatasheet.DataStructures.Store
@using BlazorDatasheet.Formula.Core
@using BlazorDatasheet.Formula.Core.Interpreter.Parsing

<HighlightedInput
    Style="@CssUtil.GetStyledInput(Cell)"
    RangeColors="_colors"
    @bind-Value:set="OnInput"
    @bind-Value:get="CurrentValue"/>

@foreach (var cr in _colorRegions)
{
    var r = cr.Region.GetIntersection(_sheet.Region);
    if (r == null)
        continue;
    var x = GetX(r);
    var y = GetY(r);
    var w = GetWidth(r);
    var h = GetHeight(r);
    <BoxOverlayRenderer
        Width="w"
        Height="h"
        X="x"
        Y="y"
        ZIndex="12"
        BorderStyle="dashed"
        BorderColor="@cr.Data"
        BorderThickness="2"/>
}

@code {

    private IReadOnlyCell Cell;
    private Sheet _sheet;
    private List<DataRegion<string>> _colorRegions = new();
    private List<string> _colors = new List<string>() { "blue", "green", "red", "purple" };
    private double _editX;
    private double _editY;

    public override void BeforeEdit(IReadOnlyCell cell, Sheet sheet)
    {
        Cell = cell;
        _sheet = sheet;
        _editX = sheet.Columns.GetWidthBetween(0, cell.Col);
        _editY = sheet.Rows.GetHeightBetween(0, cell.Row);
    }

    private void OnInput(string value)
    {
        var newValue = value ?? string.Empty;
        CurrentValue = newValue;
        Highlight();
    }

    private void Highlight()
    {
        if (CurrentValue.StartsWith("="))
        {
            var parser = new Parser();
            var formula = parser.FromString(CurrentValue);
            if (!formula.References.Any())
                return;

            _colorRegions = formula.References
                .Select((r, i) =>
                {
                    var colorIndex = i % _colors.Count;
                    return new DataRegion<string>(_colors[colorIndex], r.ToRegion());
                }).ToList();
        }
    }

    private double GetX(IRegion region)
    {
        return _sheet.Columns.GetWidthBetween(0, region.Left) - _editX + 1;
    }

    private double GetY(IRegion region)
    {
        return _sheet.Rows.GetHeightBetween(0, region.Top) - _editY + 1;
    }

    private double GetWidth(IRegion region)
    {
        return _sheet.Columns.GetWidthBetween(region.Left, region.Right + 1) - 2;
    }

    private double GetHeight(IRegion region)
    {
        return _sheet.Rows.GetHeightBetween(region.Top, region.Bottom + 1) - 2;
    }

    public override void BeginEdit(EditEntryMode entryMode, string? editValue, string key)
    {
        if (entryMode == EditEntryMode.Key && !String.IsNullOrEmpty(key) && key.Length == 1)
        {
            CurrentValue = key;
        }
        else
        {
            CurrentValue = editValue?.ToString() ?? string.Empty;
        }

        Highlight();
        StateHasChanged();
    }

}