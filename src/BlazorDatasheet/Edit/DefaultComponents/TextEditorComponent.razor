@implements ICellEditor
@using BlazorDatasheet.Interfaces
@using System.Text
@using BlazorDatasheet.Data
@using BlazorDatasheet.Util

<input
    type="text"
    class="text-input"
    @bind="EditedValue"
    @bind:event="oninput"
    style="@CssUtil.GetStyledInput(EditorManager.CurrentEditedCell)"
    @ref="InputRef"/>

@code {

    [Parameter]
    public EditorManager EditorManager { get; set; }

    public string EditedValue
    {
        get => EditorManager.GetEditedValue<string>();
        set => EditorManager.SetEditedValue(value);
    }

    private ElementReference InputRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InputRef.FocusAsync();
            await base.OnAfterRenderAsync(firstRender);
        }
    }

    public void BeginEdit(EditEntryMode entryMode, IWriteableCell cell, string key)
    {
        EditedValue = cell.GetValue<string>();
        if (EditedValue == null)
            EditedValue = string.Empty;

        if (entryMode == EditEntryMode.Key && !String.IsNullOrEmpty(key) && key.Length == 1)
        {
            EditedValue = key;
        }
    }

    public bool CanAcceptEdit() => true;
    public bool CanCancelEdit() => true;

    public bool HandleKey(string key, bool ctrlKey, bool shiftKey, bool altKey, bool metaKey)
    {
        return false;
    }

}