@using BlazorDatasheet.DataStructures.Geometry
@using BlazorDatasheet.Render
@using BlazorDatasheet.Services
@using Microsoft.JSInterop
@using BlazorDatasheet.Core.Data
@using BlazorDatasheet.Core.Layout
@using BlazorDatasheet.DataStructures.Intervals
@using BlazorDatasheet.DataStructures.Util
@using BlazorDatasheet.Events
@using BlazorDatasheet.Menu
@inject IJSRuntime JS;
@inject IWindowEventService _windowEventService;
@implements IAsyncDisposable
@inherits SheetComponentBase

<!-- Resize preview -->
@if (IsDragging)
{
    var resizeWidth = Math.Max(_minResizeWidth, CellLayoutProvider.ComputeWidth(ActiveAdornerIndex, 1) + CurrentColResizeAmount);
    <BoxOverlayRenderer
        Y="0"
        Width="3"
        BorderThickness="1"
        X="@(CellLayoutProvider.ComputeLeftPosition(ActiveAdornerIndex) + resizeWidth)"
        Height="@(CellLayoutProvider.TotalHeight)"/>
}

@for (int i = ColStart; i < (ColStart + NCols); i++)
{
    var col = i;
    var colHeading = Sheet.Columns.GetHeading(i) ?? RangeText.ColNumberToLetters(col);

    <th class="unselectable @GetActiveClass(col)">
        <div style="width: 100%; display: flex; justify-content: start; position: relative; overflow-x: visible;">
            <div class="sheet-cell" data-col="@col" data-row="-1" style="display: flex; justify-content: space-between; width: 100%;">
                <div>
                    @HeadingRenderer(new HeadingContext(col, colHeading))
                </div>
                <div style="display: flex; flex-direction: row;">
                    <SheetMenuTarget MenuId="@ContextMenus.Selection" MenuData="Sheet">
                        <CaretButton/>
                    </SheetMenuTarget>
                </div>
            </div>

            <div class="unselectable"
                 @onmousedown="_ => HandleMouseDownOnAdorner(col)"
                 style="position: absolute; 
                 right: 0; 
                 z-index: 4; 
                 margin-right:-5px; 
                 width: 10px; 
                 height: 100%; 
                 float: left; 
                 display: inline-block; 
                 cursor: col-resize;">
            </div>
        </div>
    </th>
}

@code {

    private Sheet? _sheet;

    [Parameter, EditorRequired] public Sheet Sheet { get; set; } = default!;
    [Parameter, EditorRequired] public CellLayoutProvider CellLayoutProvider { get; set; } = null!;
    [Parameter] public EventCallback<ColumnMouseEventArgs> OnMouseUp { get; set; }
    [Parameter] public EventCallback<ColumnMouseEventArgs> OnMouseOver { get; set; }
    [Parameter] public EventCallback<ColumnMouseEventArgs> OnMouseDown { get; set; }
    [Parameter, EditorRequired] public RenderFragment<HeadingContext> HeadingRenderer { get; set; } = default!;
    [Parameter] public int NCols { get; set; }
    [Parameter] public int ColStart { get; set; }

    private double MouseX { get; set; }
    private double MouseXStart { get; set; }
    private int ActiveAdornerIndex { get; set; }
    private bool IsDragging { get; set; }
    private double CurrentColResizeAmount { get; set; }
    private int _minResizeWidth = 15;

    private List<OrderedInterval> _selectionIntervals = new();

    protected override void OnParametersSet()
    {
        if (_sheet != Sheet)
        {
            if (_sheet != null)
            {
                _sheet.Selection.SelectingChanged -= OnSelectingChanged;
                _sheet.Selection.SelectionChanged -= SelectionOnSelectionChanged;
            }

            _sheet = Sheet;
            if (_sheet == null)
                return;

            _sheet.Selection.SelectingChanged += OnSelectingChanged;
            _sheet.Selection.SelectionChanged += SelectionOnSelectionChanged;
        }

        base.OnParametersSet();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _windowEventService.RegisterMouseEvent("mouseup", WindowEventServiceOnOnMouseUp);
            await _windowEventService.RegisterMouseEvent("mousemove", WindowHandleMouseMove);
        }
    }

    public Task<bool> WindowHandleMouseMove(MouseEventArgs arg)
    {
        MouseX = arg.PageX;
        if (IsDragging)
        {
            CurrentColResizeAmount = MouseX - MouseXStart; // 10 being the minimum width we can resize to
            StateHasChanged();
            return Task.FromResult(true);
        }

        return Task.FromResult(false);
    }

    private void HandleMouseDownOnAdorner(int col)
    {
        MouseXStart = MouseX;
        ActiveAdornerIndex = col;
        CurrentColResizeAmount = 0;
        IsDragging = true;
    }

    private Task<bool> WindowEventServiceOnOnMouseUp(MouseEventArgs arg)
    {
        if (IsDragging)
        {
            IsDragging = false;
            var resizeWidth = Math.Max(_minResizeWidth, CellLayoutProvider.ComputeWidth(ActiveAdornerIndex, 1) + CurrentColResizeAmount);
            Sheet.Columns.SetWidth(ActiveAdornerIndex, resizeWidth);
            return Task.FromResult(true);
        }

        return Task.FromResult(false);
    }

    private bool IsActive(int col)
    {
        return (Sheet.Selection.SelectingRegion?.SpansCol(col) == true)
               || Sheet.Selection.Regions.Any(x => x.SpansCol(col));
    }

    private void OnSelectingChanged(object? sender, IRegion? region) => UpdateIntervals();

    private void SelectionOnSelectionChanged(object? sender, IEnumerable<IRegion> e) => UpdateIntervals();

    private void UpdateIntervals()
    {
        StateHasChanged();
    }

    private void HandleMouseUp(int col, MouseEventArgs args)
    {
        OnMouseUp.InvokeAsync(new ColumnMouseEventArgs(col, args));
    }

    private void HandleMouseDown(int col, MouseEventArgs args)
    {
        OnMouseDown.InvokeAsync(new ColumnMouseEventArgs(col, args));
    }

    private void HandleMouseOver(int col, MouseEventArgs args)
    {
        OnMouseOver.InvokeAsync(new ColumnMouseEventArgs(col, args));
    }

    private string GetActiveClass(int col)
    {
        var isSelecting = (Sheet.Selection.SelectingRegion?.SpansCol(col) == true)
                          || Sheet.Selection.Regions.Any(x => x.SpansCol(col));
        return isSelecting ? "column-active" : "";
    }
    
    public ValueTask DisposeAsync()
    {
        return ValueTask.CompletedTask;
    }

}