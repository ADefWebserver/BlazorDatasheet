@using System.Text
@using BlazorDatasheet.Render
@using Region = BlazorDatasheet.DataStructures.Geometry.Region
@using System.ComponentModel
@using BlazorDatasheet.Core.Data
@using BlazorDatasheet.Core.Events.Input
@using BlazorDatasheet.Core.Layout
@using BlazorDatasheet.DataStructures.Geometry
@using BlazorDatasheet.Events
@using BlazorDatasheet.Services
@using BlazorDatasheet.Services
@using Microsoft.JSInterop
@inherits SheetComponentBase

<!-- Render the temp selection (currently selected region) -->
@if (Sheet != null && BoundedSelectingRegion != null && BoundedSelectingRegion?.Area > 0)
{
    <!-- We split into regions around the cell's start position, so that the cell's 
    start position shows the renderer underneath it -->
    var brokenRegions = BoundedSelectingRegion.Break(GetRegion(Sheet.Selection.SelectingStartPosition));
    foreach (var region in brokenRegions)
    {
        <BoxOverlayRenderer
            BackgroundVisible="@true"
            BackgroundStyle="@_bgStyle"
            BorderThickness="0"
            X="GetLeft(region)"
            Y="GetTop(region)"
            Width="GetWidth(region)"
            Height="GetHeight(region)"/>
    }

    <!-- now render the border around the whole thing -->
    <BoxOverlayRenderer
        BackgroundVisible="@false"
        BorderThickness="2"
        BackgroundStyle="@_bgStyle"
        X="GetLeft(BoundedSelectingRegion)"
        Y="GetTop(BoundedSelectingRegion)"
        Width="GetWidth(BoundedSelectingRegion)"
        Height="GetHeight(BoundedSelectingRegion)"/>
}

<!-- render the selections that exist in the sheet -->
@if (Sheet?.Selection != null && !Sheet.Selection.IsEmpty())
{
    foreach (var region in Sheet.Selection.Regions)
    {
        var boundedRegion = region.GetIntersection(Sheet.Region);
        var isActiveRegion = region.Equals(Sheet.Selection.ActiveRegion);
        if (boundedRegion == null)
            continue;
        <!-- if it's the active region, render around the active position -->
        if (isActiveRegion)
        {
            var brokenRegions = boundedRegion
                .Break(GetRegion(Sheet.Selection.ActiveCellPosition));
            foreach (var brokenRegion in brokenRegions)
            {
                <BoxOverlayRenderer
                    BackgroundStyle="@_bgStyle"
                    BackgroundVisible="true"
                    BorderThickness="0"
                    X="GetLeft(brokenRegion)"
                    Y="GetTop(brokenRegion)"
                    Width="GetWidth(brokenRegion)"
                    Height="GetHeight(brokenRegion)"/>
            }
        }

        <!-- now render the border around the whole region. No fill on active region because we've filled it already -->
        <BoxOverlayRenderer
            BackgroundVisible="@(!isActiveRegion)"
            BorderThickness="@(isActiveRegion ? 2 : 0)"
            BackgroundStyle="@_bgStyle"
            X="GetLeft(boundedRegion)"
            Y="GetTop(boundedRegion)"
            Width="GetWidth(boundedRegion)"
            Height="GetHeight(boundedRegion)"/>
    }
}


@code {

    [Parameter, EditorRequired] public CellLayoutProvider CellLayoutProvider { get; set; } = null!;

    private Sheet? _sheet;

    [Parameter, EditorRequired] public Sheet? Sheet { get; set; }

    private string _bgStyle = "background:var(--selection-bg-color);";

    private IRegion? BoundedSelectingRegion => Sheet?.Selection.SelectingRegion?.GetIntersection(Sheet?.Region);

    private double GetLeft(IRegion region) => CellLayoutProvider.ComputeLeftPosition(region);
    private double GetTop(IRegion region) => CellLayoutProvider.ComputeTopPosition(region);
    private double GetWidth(IRegion region) => CellLayoutProvider.ComputeWidth(region);
    private double GetHeight(IRegion region) => CellLayoutProvider.ComputeHeight(region);


    protected override void OnParametersSet()
    {
        if (_sheet != Sheet)
        {
            if (_sheet != null)
            {
                _sheet.Selection.SelectionChanged -= OnSelectionChanged;
                _sheet.Selection.SelectingChanged -= OnSelectingChanged;
            }

            _sheet = Sheet;

            if (_sheet == null) return;

            _sheet.Selection.SelectionChanged += OnSelectionChanged;
            _sheet.Selection.SelectingChanged += OnSelectingChanged;
            _sheet.Editor.EditBegin += (sender, args) => StateHasChanged();
        }
    }

    // Returns the region that the position covers (may be > 1 because of merged cells)
    private IRegion GetRegion(CellPosition position)
    {
        var merge = Sheet.Cells?.GetMerge(position.row, position.col);
        if (merge != null)
            return merge;
        else
            return new Region(position.row, position.col);
    }

    private void OnSelectionChanged(object? sender, IEnumerable<IRegion> regions)
    {
        StateHasChanged();
    }

    private void OnSelectingChanged(object? sender, IRegion? region)
    {
        StateHasChanged();
    }

}