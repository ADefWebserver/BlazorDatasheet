@using System.Text
@using BlazorDatasheet.Data
@using BlazorDatasheet.Render
@using Range = BlazorDatasheet.Data.Range
@using System.ComponentModel
@using BlazorDatasheet.Selecting

<!-- Render the temp selection (currently selected range) -->
@if (TempSelection.ActiveRange != null && FixedTempSelection?.Area > 0)
{
    <!-- We split into ranges around the cell's start position, so that the cell's 
    start position shows the renderer underneath it -->
    var brokenRanges = FixedTempSelection.Break(TempSelection.ActiveRange.Start);
    foreach (var range in brokenRanges)
    {
        <BoxOverlayRenderer
            BackgroundVisible="@true"
            BackgroundStyle="@bgStyle"
            BorderThickness="0"
            X="getLeft(range)"
            Y="getTop(range)"
            Width="getWidth(range)"
            Height="getHeight(range)"/>
    }
    <!-- now render the border around the whole thing -->
    <BoxOverlayRenderer
        BackgroundVisible="@false"
        BorderThickness="1"
        BackgroundStyle="@bgStyle"
        X="getLeft(FixedTempSelection)"
        Y="getTop(FixedTempSelection)"
        Width="getWidth(FixedTempSelection)"
        Height="getHeight(FixedTempSelection)"/>
}

<!-- render the selections that exist in the sheet -->
@if (Sheet?.Selection != null && !Sheet.Selection.IsEmpty())
{
    foreach (var range in Sheet.Selection.Ranges)
    {
        var fixedRange = range.GetIntersection(Sheet.Range);
        var isActiveRange = range == Sheet.Selection.ActiveRange;
        <!-- if it's the active range, render around the active position -->
        if (isActiveRange)
        {
            var brokenRanges = fixedRange.Break(Sheet.Selection.ActiveCellPosition);
            foreach (var brokenRange in brokenRanges)
            {
                <BoxOverlayRenderer
                    BackgroundStyle="@bgStyle"
                    BackgroundVisible="true"
                    BorderThickness="0"
                    X="getLeft(brokenRange)"
                    Y="getTop(brokenRange)"
                    Width="getWidth(brokenRange)"
                    Height="getHeight(brokenRange)"/>
            }
        }

        <!-- now render the border around the whole range. No fill on active range because we've filled it already -->
        <BoxOverlayRenderer
            BackgroundVisible="@(!isActiveRange)"
            BorderThickness="1"
            BackgroundStyle="@bgStyle"
            X="getLeft(fixedRange)"
            Y="getTop(fixedRange)"
            Width="getWidth(fixedRange)"
            Height="getHeight(fixedRange)"/>
    }
}

@code {

    [Parameter, EditorRequired]
    public CellLayoutProvider CellLayoutProvider { get; set; }

    private Sheet? _sheet;

    [Parameter, EditorRequired]
    public Sheet? Sheet { get; set; }

    private Selection? _tempSelection { get; set; }

    [Parameter, EditorRequired]
    // The range that is currently being selected.
    public Selection? TempSelection { get; set; }

    private string bgStyle = "background:var(--selection-bg-color);";

    private IFixedSizeRange? FixedTempSelection => TempSelection?.ActiveRange?.GetIntersection(Sheet?.Range);

    private double getLeft(IFixedSizeRange range) => CellLayoutProvider.ComputeLeftPosition(range) - 1;
    private double getTop(IFixedSizeRange range) => CellLayoutProvider.ComputeTopPosition(range) - 1;
    private double getWidth(IFixedSizeRange range) => CellLayoutProvider.ComputeWidth(range) + 2;
    private double getHeight(IFixedSizeRange range) => CellLayoutProvider.ComputeHeight(range) + 2;


    protected override void OnParametersSet()
    {
        if (_tempSelection != TempSelection)
        {
            if (_tempSelection != null)
            {
                _tempSelection.Changed -= OnSelectionChanged;
            }
            _tempSelection = TempSelection;
            _tempSelection.Changed += OnSelectionChanged;
        }{}

        if (_sheet != Sheet)
        {
            if (_sheet != null)
            {
                _sheet.Selection.Changed -= OnSelectionChanged;
            }
            _sheet = Sheet;
            _sheet.Selection.Changed += OnSelectionChanged;
        }
    }

    private void OnSelectionChanged(object? sender, IEnumerable<IRange> ranges)
    {
        StateHasChanged();
    }

}