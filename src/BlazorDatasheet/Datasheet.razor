@using BlazorDatasheet.Model
@using System.Text.Encodings.Web
@using BlazorDatasheet.Interfaces
@using Microsoft.JSInterop;
@inject IJSRuntime JS
@using BlazorDatasheet.Render;
@implements IDisposable;
@using Microsoft.AspNetCore.Components.Web.Virtualization;

<table
    style="max-height: 350px; position: relative"
    class="sheet @(IsDataSheetActive ? "active-sheet" : "inactive-sheet")"
    @onmouseover="() => IsMouseInsideSheet = true"
    @onmouseout="() => IsMouseInsideSheet = false">
    <!-- Column headers -->
    <tr>
        <td style="background: #fafafa; border: 1px solid lightgray;"></td>
        @for (var i = 0; i < Sheet?.NumCols; i++)
        {
            var col = i;
            var colDefn = Sheet.ColumnHeadings.Count > i ? Sheet.ColumnHeadings[i] : null;
            <td
                class="sheet-cell column-head @(IsDataSheetActive && Sheet.IsColumnActive(col) ? "column-active" : "")"
                @onmouseup="e => HandleCellMouseUp(-1, col, e)"
                @onmouseover="e => HandleCellMouseOver(-1, col, e)"
                @onmousedown="e => HandleColumnHeaderMouseDown(col, e)">
                @colDefn?.Header
            </td>
        }
    </tr>

    <Virtualize Items="@Sheet?.Rows" Context="sheetRow">
        <tr @key="sheetRow.RowNumber">
            <td
                class="sheet-cell row-head @(IsDataSheetActive && Sheet.IsRowActive(sheetRow.RowNumber) ? "row-active" : "")"
                @onmousedown="e => HandleRowHeaderMouseDown(sheetRow.RowNumber, e)"
                @onmouseover="e => HandleCellMouseOver(sheetRow.RowNumber, -1, e)"
                @onmouseup="e => HandleCellMouseUp(sheetRow.RowNumber, -1, e)">
                @(Sheet.RowHeadings.Count > sheetRow.RowNumber ? Sheet.RowHeadings[sheetRow.RowNumber] : null)
            </td>
            @for (int j = 0; j < Sheet?.NumCols; j++)
            {
                var row = sheetRow.RowNumber;
                var col = j;

                var cell = Sheet.GetCell(row, col);
                var format = Sheet.GetFormat(cell);

                <td
                    class="sheet-cell"
                    @onmousedown="e => HandleCellMouseDown(row, col, e)"
                    @onmouseover="e => HandleCellMouseOver(row, col, e)"
                    @ondblclick="e => HandleCellDoubleClick(row, col, e)"
                    @onmouseup="e => HandleCellMouseUp(row, col, e)">
                    @if (EditPosition?.Col == col && EditPosition?.Row == row)
                    {
                        <DynamicComponent
                            Type="getEditorComponentType(cell.Type)"
                            Parameters="@getEditorParameters()"
                            @ref="_activeEditorReference"/>
                    }
                    else
                    {
                        <div
                            class="@(IsDataSheetActive && Sheet.IsSelected(row, col) ? "cell-selected" : "") cell"
                            style="
                            background: @format.BackgroundColor; 
                            color: @format.ForegroundColor;
                            font-weight: @format.FontWeight;
                            display: flex;
                            ">
                            @if (format.Icon != null)
                            {
                                <div style="margin-right:2px; color: @format.IconColor">@format.Icon</div>
                            }
                            <DynamicComponent
                                Type="@getCellRendererType(cell.Type)"
                                Parameters="@getCellRendererParameters(cell)">
                            </DynamicComponent>
                        </div>
                    }

                </td>
            }
        </tr>
    </Virtualize>
</table>