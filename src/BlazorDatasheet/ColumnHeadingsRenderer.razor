@using BlazorDatasheet.Data
@using BlazorDatasheet.Data.Events
@using BlazorDatasheet.Render
@using BlazorDatasheet.Selecting


<div style="position: absolute; top: 0; left: 0;">

    @foreach (var interval in _selectionIntervals)
    {
        <BoxOverlayRenderer
            BackgroundVisible="@true"
            BorderThickness="0"
            BackgroundStyle="background:var(--selection-bg-color);"
            Width="CellLayoutProvider.ComputeWidth(interval.Length) + 2"
            Height="CellLayoutProvider.ComputeHeight(1) + 1"
            X="CellLayoutProvider.ComputeLeftPosition(interval.Start) - 1"
            Y="CellLayoutProvider.ComputeTopPosition(-1)"/>
    }

</div>

@for (var i = 0; i < Sheet?.NumCols; i++)
{
    var col = i;
    var colDefn = Sheet?.ColumnHeadings.Count > i ? Sheet?.ColumnHeadings[i] : null;

    <div
        class="sheet-cell @(IsActive(col) ? "column-active" : "")"
        style="z-index: 1000"
        @onmouseup="e => HandleMouseUp(col, e)"
        @onmouseover="e => HandleMouseOver(col, e)"
        @onmousedown="e => HandleMouseDown(col, e)">
        <div class="cell">
            @colDefn?.Header
        </div>
    </div>
}

@code {

    private Sheet? _sheet;

    [Parameter, EditorRequired]
    public Sheet? Sheet { get; set; }

    [Parameter]
    public CellLayoutProvider CellLayoutProvider { get; set; }

    [Parameter]
    public EventCallback<ColumnMouseEvent> OnMouseUp { get; set; }

    [Parameter]
    public EventCallback<ColumnMouseEvent> OnMouseOver { get; set; }

    [Parameter]
    public EventCallback<ColumnMouseEvent> OnMouseDown { get; set; }

    private Selection? _tempSelection { get; set; }

    [Parameter, EditorRequired]
    // The region that is currently being selected.
    public Selection? TempSelection { get; set; }

    public List<OrderedInterval> _selectionIntervals { get; set; } = new();

    private bool IsActive(int col)
    {
        return (TempSelection?.ActiveRegion?.SpansCol(col) == true)
               || Sheet.Selection.Regions.Any(x => x.SpansCol(col));
    }

    protected override void OnParametersSet()
    {
        if (_tempSelection != TempSelection)
        {
            if (_tempSelection != null)
            {
                _tempSelection.Changed -= OnSelectionChanged;
            }
            _tempSelection = TempSelection;
            _tempSelection.Changed += OnSelectionChanged;
        }

        if (_sheet != Sheet)
        {
            if (_sheet != null)
            {
                _sheet.Selection.Changed -= OnSelectionChanged;
            }
            _sheet = Sheet;
            _sheet.Selection.Changed += OnSelectionChanged;
        }
        base.OnParametersSet();
    }

    private void OnSelectionChanged(object? sender, IEnumerable<IRegion> regions)
    {
        var intervals = new List<OrderedInterval>();
        if (!TempSelection.IsEmpty() && TempSelection.ActiveRegion is ColumnRegion)
        {
            var fixedTempSelection = TempSelection.ActiveRegion.GetIntersection(Sheet.Region);
            intervals.Add(new OrderedInterval(fixedTempSelection.TopLeft.Col, fixedTempSelection.BottomRight.Col));
        }
        foreach (var region in Sheet.Selection.Regions)
        {
            if (region is ColumnRegion)
            {
                var fixedRegion = region.GetIntersection(Sheet.Region);
                intervals.Add(new OrderedInterval(fixedRegion.TopLeft.Col, fixedRegion.BottomRight.Col));
            }
        }
        _selectionIntervals = OrderedInterval.Merge(intervals);
        StateHasChanged();
    }

    public bool IsColumnActive(int col)
    {
        return Sheet.Selection.Regions.Any(x => x.SpansCol(col));
    }

    private void HandleMouseUp(int col, MouseEventArgs args)
    {
        OnMouseUp.InvokeAsync(new ColumnMouseEvent(col, args));
    }

    private void HandleMouseDown(int col, MouseEventArgs args)
    {
        OnMouseDown.InvokeAsync(new ColumnMouseEvent(col, args));
    }

    private void HandleMouseOver(int col, MouseEventArgs args)
    {
        OnMouseOver.InvokeAsync(new ColumnMouseEvent(col, args));
    }

}