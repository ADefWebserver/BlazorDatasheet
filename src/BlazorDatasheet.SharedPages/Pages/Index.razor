@page "/"
@using BlazorDatasheet.Data
@using BlazorDatasheet.ObjectEditor
@using BlazorDatasheet.Validation
@using BlazorDatasheet.Render
@using BlazorDatasheet.SharedPages.Data

<PageTitle>Index</PageTitle>

<p>
    Blazor DataSheet is an excel-like editor for cellular values. Below shows some of the features of the data sheet. Sample code is available on <a href="https://github.com/anmcgrath/BlazorDatasheet">GitHub</a>
</p>

<Datasheet
    Theme="@Theme"
    Sheet="Sheet"
    StickyHeadings="true"
    IsFixedHeight="true">

</Datasheet>

<div>
    <button @onclick="InsertAtSelection">Insert row at selection</button>
    <button @onclick="() => Sheet.Commands.Undo()">Undo</button>
    <button @onclick="() => Sheet.Commands.Redo()">Redo</button>
    <button @onclick="@(() => Sheet.Selection.Value = "Bob")">Set to Bob</button>
    <button @onclick="@(() => Sheet.SetFormat(new Format() { BackgroundColor = "red" }, Sheet.Selection))">Set format to red</button>
    <button @onclick="@(() => Sheet.SetFormat(new Format() { BackgroundColor = "blue" }, Sheet.Selection))">Set format to blue</button>
</div>

<div>
    <input id="darkmode-toggle" type="checkbox" @bind="IsDarkMode"/>
    <label for="darkmode-toggle">Darkmode</label>
</div>

@code{

    private Sheet Sheet;
    private List<Person> People { get; set; }
    private ObjectEditor<Person> _editor;
    private string Theme => IsDarkMode ? "dark" : "default";
    private bool IsDarkMode { get; set; }

    private void InsertAtSelection()
    {
        if (Sheet.Selection.ActiveRegion == null)
        {
            return;
        }
        _editor.InsertAt(new Person(), Sheet.Selection.ActiveRegion.TopLeft.Row);
    }

    private Format GreenBg = new Format() { BackgroundColor = "var(--cell-highlight-bg-color)" };

    protected override void OnInitialized()
    {
        People = new List<Person>();

        var random = new Random();

        var firstNames = new List<string>() { "Myah", "Jaeden", "Evelin", "Riya", "Isiah", "Alannah", "Mohamed", "Gavyn", "Leo", "Carley", "Sloane" };
        var lastNames = new List<string>() { "Walters", "Hall", "Smith", "Parker", "Velasquez", "Mccall", "Farmer", "Boone", "Fitzpatrick", "Mcclain", "Mccoy", "Baker" };
        var cats = new List<string>() { "Manager", "Employee" };

        for (int i = 0; i < 1000; i++)
        {
            People.Add(new Person()
            {
                Id = i,
                Age = random.Next(100).ToString(),
                FirstName = firstNames[random.Next(0, firstNames.Count)],
                LastName = lastNames[random.Next(0, lastNames.Count)],
                Category = cats[random.Next(0, cats.Count)],
                IsFriendly = false
            });
        }

        var ageCf =
            new ConditionalFormat(
                (posn, sheet) => (sheet.GetCell(posn.row, posn.col).GetValue<int?>()) > 85, cell => new Format() { ForegroundColor = "var(--invalid-cell-foreground-color)" });

        var builder1 = new ObjectEditorBuilder<Person>(People, GridDirection.PropertiesAcrossColumns);
        builder1.AutogenerateProperties(false)
                .WithExpressionFormat(x => x.IsFriendly, x => GreenBg)
                .WithProperty(x => x.Id, pd => { pd.Heading = "Person ID"; })
                .WithProperty(x => x.FirstName, pd => { pd.Heading = "First Name"; })
                .WithProperty(x => x.LastName, pd => { pd.Heading = "Last Name"; })
                .WithProperty(x => x.Age, pd =>
                {
                    pd.ApplyConditionalFormat(ageCf);
                    pd.UseDataValidator(new NumberValidator(true));
                })
                .WithProperty(x => x.Category, pd =>
                {
                    pd.Heading = "Category";
                    pd.Type = "select";
                    pd.UseDataValidator(new SourceValidator(new List<string>() { "", "Manager", "Employee" }, true));
                })
                .WithProperty(x => x.IsFriendly, pd => { pd.Heading = "Is Friendly?"; });

        _editor = builder1.Build();

        Sheet = _editor.Sheet;
    }

}