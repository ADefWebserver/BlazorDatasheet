@using System.Text
@using BlazorDatasheet.Data
@using BlazorDatasheet.Render
@using Region = BlazorDatasheet.Data.Region
@using System.ComponentModel
@using BlazorDatasheet.Selecting

<!-- Render the temp selection (currently selected region) -->
@if (TempSelection.ActiveRegion != null && FixedTempSelection?.Area > 0)
{
    <!-- We split into regions around the cell's start position, so that the cell's 
    start position shows the renderer underneath it -->
    var brokenRegions = FixedTempSelection.Break(TempSelection.ActiveRegion.Start);
    foreach (var region in brokenRegions)
    {
        <BoxOverlayRenderer
            BackgroundVisible="@true"
            BackgroundStyle="@bgStyle"
            BorderThickness="0"
            X="getLeft(region)"
            Y="getTop(region)"
            Width="getWidth(region)"
            Height="getHeight(region)"/>
    }
    <!-- now render the border around the whole thing -->
    <BoxOverlayRenderer
        BackgroundVisible="@false"
        BorderThickness="1"
        BackgroundStyle="@bgStyle"
        X="getLeft(FixedTempSelection)"
        Y="getTop(FixedTempSelection)"
        Width="getWidth(FixedTempSelection)"
        Height="getHeight(FixedTempSelection)"/>
}

<!-- render the selections that exist in the sheet -->
@if (Sheet?.Selection != null && !Sheet.Selection.IsEmpty())
{
    foreach (var region in Sheet.Selection.Regions)
    {
        var fixedRegion = region.GetIntersection(Sheet.Region);
        var isActiveRegion = region == Sheet.Selection.ActiveRegion;
        <!-- if it's the active region, render around the active position -->
        if (isActiveRegion)
        {
            var brokenRegions = fixedRegion
                .Break(Sheet.Selection.ActiveCellPosition);
            foreach (var brokenRegion in brokenRegions)
            {
                <BoxOverlayRenderer
                    BackgroundStyle="@bgStyle"
                    BackgroundVisible="true"
                    BorderThickness="0"
                    X="getLeft(brokenRegion)"
                    Y="getTop(brokenRegion)"
                    Width="getWidth(brokenRegion)"
                    Height="getHeight(brokenRegion)"/>
            }
        }

        <!-- now render the border around the whole region. No fill on active region because we've filled it already -->
        <BoxOverlayRenderer
            BackgroundVisible="@(!isActiveRegion)"
            BorderThickness="1"
            BackgroundStyle="@bgStyle"
            X="getLeft(fixedRegion)"
            Y="getTop(fixedRegion)"
            Width="getWidth(fixedRegion)"
            Height="getHeight(fixedRegion)"/>
    }
}

@code {

    [Parameter, EditorRequired]
    public CellLayoutProvider CellLayoutProvider { get; set; }

    private Sheet? _sheet;

    [Parameter, EditorRequired]
    public Sheet? Sheet { get; set; }

    private Selection? _tempSelection { get; set; }

    [Parameter, EditorRequired]
    // The region that is currently being selected.
    public Selection? TempSelection { get; set; }

    private string bgStyle = "background:var(--selection-bg-color);";

    private IFixedSizeRegion? FixedTempSelection => TempSelection?.ActiveRegion?.GetIntersection(Sheet?.Region);

    private double getLeft(IRegion region) => CellLayoutProvider.ComputeLeftPosition(region) - 1;
    private double getTop(IRegion region) => CellLayoutProvider.ComputeTopPosition(region) - 1;
    private double getWidth(IRegion region) => CellLayoutProvider.ComputeWidth(region) + 2;
    private double getHeight(IRegion region) => CellLayoutProvider.ComputeHeight(region) + 2;


    protected override void OnParametersSet()
    {
        if (_tempSelection != TempSelection)
        {
            if (_tempSelection != null)
            {
                _tempSelection.Changed -= OnSelectionChanged;
            }
            _tempSelection = TempSelection;
            _tempSelection.Changed += OnSelectionChanged;
        }{}

        if (_sheet != Sheet)
        {
            if (_sheet != null)
            {
                _sheet.Selection.Changed -= OnSelectionChanged;
            }
            _sheet = Sheet;
            _sheet.Selection.Changed += OnSelectionChanged;
        }
    }

    private void OnSelectionChanged(object? sender, IEnumerable<IRegion> regions)
    {
        StateHasChanged();
    }

}