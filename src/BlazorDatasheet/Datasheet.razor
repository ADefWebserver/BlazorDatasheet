@using BlazorDatasheet.Data
@using System.Text.Encodings.Web
@using BlazorDatasheet.Interfaces
@using Microsoft.JSInterop;
@inject IJSRuntime JS
@using BlazorDatasheet.Render;
@implements IDisposable;
@using Microsoft.AspNetCore.Components.Web.Virtualization;
@using System.Collections.Immutable
@using System.Reflection
@using System.Text
@using BlazorDatasheet.DataStructures.Util
@using BlazorDatasheet.Util
@using Microsoft.Extensions.Primitives
<div
    style="@GetContainerStyleString()"
    theme="@Theme"
    class="@GetContainerClassString()"
    @onmouseover="() => IsMouseInsideSheet = true"
    @onmouseout="() => IsMouseInsideSheet = false">

    @if (Sheet != null)
    {
        <div>
            <!-- Column headers -->
            <div style="display: flex; flex-direction: column; justify-content: start;">

                @if (Sheet?.ShowColumnHeadings == true)
                {
                    <div style="display: flex; flex-direction: row;" class="sheet-row column-head @(StickyHeadings ? "col-sticky" : "")">
                        @if (Sheet.ShowRowHeadings)
                        {
                            <!-- the little bit outside to the left of first col header -->
                            <div class="sheet-cell row-head"
                                 style="@CssUtil.GetCellWidthStyles(-1, 1, Sheet.LayoutProvider); display: inline-block;@(StickyHeadings ? "position: sticky; left: 0; z-index:2;" : "")">
                                <div class="cell"></div>
                            </div>
                        }
                        <div id="filler-left-0" style="min-width: @(Sheet.LayoutProvider.ComputeWidth(0, ColStart))px; display: block; float: left; height: 1px;"></div>

                        <ColumnHeadingsRenderer
                            OnMouseDown="HandleColumnHeaderMouseDown"
                            OnMouseUp="HandleColumnHeaderMouseUp"
                            OnMouseOver="HandleColumnHeaderMouseOver"
                            NVisibleCols="NVisibleCols"
                            VisibleColStart="ColStart"
                            CellLayoutProvider="Sheet.LayoutProvider"
                            Sheet="Sheet"/>

                    </div>
                }

                <div id="filler-top" @ref="_fillerTop" style="min-height: @(Sheet.LayoutProvider.ComputeHeight(0, RowStart))px; min-width:@(Sheet.LayoutProvider.TotalWidth)px; display: block;"></div>

                <div id="last-row" style="display: flex; flex-direction: row;">

                    @if (Sheet.ShowRowHeadings)
                    {
                        <div id="rowHeadings" class="@(StickyHeadings ? "row-sticky" : "")">
                            <RowHeadingsRenderer
                                OnMouseDown="HandleRowHeaderMouseDown"
                                OnMouseUp="HandleRowHeaderMouseUp"
                                OnMouseOver="HandleRowHeaderMouseOver"
                                NVisibleRows="NVisibleRows"
                                VisibleRowStart="RowStart"
                                Sheet="Sheet"
                                CellLayoutProvider="Sheet.LayoutProvider"/>
                        </div>
                    }


                    <div id="filler-left-1" @ref="_fillerLeft1" style="float:right; min-width: @(Sheet.LayoutProvider.ComputeWidth(0, ColStart))px; height: @(RenderedInnerSheetHeight)px;"></div>

                    <div style="width:@(RenderedInnerSheetWidth)px;height: @(RenderedInnerSheetHeight)px;display: block;">

                        <div style="width: @(RenderedInnerSheetWidth)px; height:@(RenderedInnerSheetHeight)px; border: var(--sheet-border-style); display: block;">
                            @for (int rowIndex = RowStart; rowIndex < (RowStart + NVisibleRows); rowIndex++)
                            {
                                var row = rowIndex;
                                var rowHeight = @Sheet.LayoutProvider.ComputeHeight(row, 1);
                                <div @key="row" style="height:@(rowHeight)px">
                                    @for (int j = ColStart; j < (ColStart + NVisibleCols); j++)
                                    {
                                        var col = j;
                                        var cell = Sheet.GetCell(row, col);
                                        var colWidth = @Sheet.LayoutProvider.ComputeWidth(col, 1);
                                        <div
                                            @onmouseup="e => HandleCellMouseUp(row, col, e.MetaKey, e.CtrlKey, e.ShiftKey)"
                                            @ondblclick="e => HandleCellDoubleClick(row, col, e.MetaKey, e.CtrlKey, e.ShiftKey)"
                                            @onmouseover="e => HandleCellMouseOver(row, col)"
                                            @onmousedown="e => HandleCellMouseDown(row, col, e.MetaKey, e.CtrlKey, e.ShiftKey)"
                                            @key="col"
                                            style="border-right: var(--sheet-border-style); border-bottom: var(--sheet-border-style);
                                            padding:0; display: inline-block; box-sizing:border-box; overflow: hidden; width:@(colWidth)px;max-width:@(colWidth)px;height:@(rowHeight)px;max-height:@(rowHeight)px;"
                                            class="sheet-cell">
                                            <CascadingValue Value="Sheet" IsFixed="true">
                                                <CellRenderer
                                                    Row="row"
                                                    Col="col"
                                                    IsValid="cell.IsValid"
                                                    IsDirty="SheetIsDirty || DirtyCells.Contains((row, col))">
                                                    <ItemTemplate>
                                                        <DynamicComponent
                                                            Type="@getCellRendererType(cell.Type)"
                                                            Parameters="@getCellRendererParameters(Sheet, cell, row, col)">
                                                        </DynamicComponent>
                                                    </ItemTemplate>
                                                </CellRenderer>
                                            </CascadingValue>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>

                    <div id="filler-right" @ref="_fillerRight" style="float:left;min-width: @(Sheet.LayoutProvider.ComputeWidthBetween(ColStart + NVisibleCols - 1 + (Sheet.ShowRowHeadings ? 1 : 0), Sheet.NumCols - 1))px; height:@(RenderedInnerSheetHeight)px;"></div>

                    <!-- Merged cells -->
                    @if (Sheet.Merges.Any() && this.ViewportRegion is not null)
                    {
                        var mergesInView = Sheet.Merges.Store.GetRegionsOverlapping(this.ViewportRegion);
                        @foreach (var merge in mergesInView)
                        {
                            var row = merge.Region.Start.Row;
                            var col = merge.Region.Start.Col;
                            var cell = Sheet.GetCell(row, col);

                            <div id="merge"
                                 class="sheet-cell"
                                 @onmouseup="e => HandleCellMouseUp(row, col, e.MetaKey, e.CtrlKey, e.ShiftKey)"
                                 @ondblclick="e => HandleCellDoubleClick(row, col, e.MetaKey, e.CtrlKey, e.ShiftKey)"
                                 @onmouseover="e => HandleCellMouseOver(row, col)"
                                 @onmousedown="e => HandleCellMouseDown(row, col, e.MetaKey, e.CtrlKey, e.ShiftKey)"
                                 style="@GetAbsoluteCellPositionStyles(row, col, merge.Region.Height, merge.Region.Width)">
                                <CascadingValue Value="Sheet" IsFixed="true">
                                    <CellRenderer
                                        ColSpan="merge.Region.Width"
                                        RowSpan="merge.Region.Height"
                                        Row="row"
                                        Col="col"
                                        IsValid="cell.IsValid"
                                        IsDirty="SheetIsDirty || DirtyCells.Contains((row, col))">
                                        <ItemTemplate>
                                            <DynamicComponent
                                                Type="@getCellRendererType(cell.Type)"
                                                Parameters="@getCellRendererParameters(Sheet, cell, row, col)">
                                            </DynamicComponent>
                                        </ItemTemplate>
                                    </CellRenderer>
                                </CascadingValue>
                            </div>
                        }
                    }

                    <EditorOverlayRenderer
                        @ref="_editorManager"
                        Sheet="Sheet"
                        DefaultCellTypes="_defaultCellTypeDefinitions"
                        CustomCellTypes="CustomCellTypeDefinitions"
                        CellLayoutProvider="Sheet.LayoutProvider"/>
                </div>

                <div id="filler-bottom" @ref="_fillerBottom" style="min-height: @(Sheet.LayoutProvider.ComputeHeightBetween(RowStart + NVisibleRows - 1 + (Sheet.ShowColumnHeadings ? 1 : 0), Sheet.NumRows - 1))px; min-width:@(1)px;"></div>
            </div>
        </div>
    }

    <!-- entire size of sheet to force scrollbars. Includes width of row headers/columns-->
    <div id="sheet_whole"
         @ref="_wholeSheetDiv"
         style="position:absolute; top:0; 
                     left:0;
                     height:@GetSheetHeightInPx()px; 
                     width:@GetSheetWidthInPx()px;
                     pointer-events: none;
                     z-index: 0;">

        <SelectionRenderer
            Sheet="Sheet"
            CellLayoutProvider="Sheet.LayoutProvider"/>
    </div>
</div>