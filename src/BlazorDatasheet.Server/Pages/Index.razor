@page "/"
@using BlazorDatasheet.Data
@using BlazorDatasheet.Server.Data
@using BlazorDatasheet.Icons
@using BlazorDatasheet.ObjectEditor
@using BlazorDatasheet.Validation
@using BlazorDatasheet.Data.Events
@using BlazorDatasheet.Render

<PageTitle>Index</PageTitle>

<h1>Blazor DataSheet examples</h1>

<p>
    Blazor DataSheet is an excel-like editor for cellular values. Below shows some of the features of the data sheet. Sample code is available on <a href="https://github.com/anmcgrath/BlazorDatasheet">GitHub</a>
</p>

<Datasheet
    Sheet="Sheet"
    IsFixedHeight="true"
    OnCellsChanged="HandleCellChanged">

</Datasheet>

@code{

    private Sheet Sheet;
    private List<Person> People { get; set; }

    protected override void OnInitialized()
    {
        People = new List<Person>();

        var random = new Random();

        var firstNames = new List<string>() { "Myah", "Jaeden", "Evelin", "Riya", "Isiah", "Alannah", "Mohamed", "Gavyn", "Leo", "Carley", "Sloane" };
        var lastNames = new List<string>() { "Walters", "Hall", "Smith", "Parker", "Velasquez", "Mccall", "Farmer", "Boone", "Fitzpatrick", "Mcclain", "Mccoy", "Baker" };
        var cats = new List<string>() { "Manager", "Employee" };

        for (int i = 0; i < 100; i++)
        {
            People.Add(new Person()
            {
                Id = i,
                Age = random.Next(100).ToString(),
                FirstName = firstNames[random.Next(0, firstNames.Count)],
                LastName = lastNames[random.Next(0, lastNames.Count)],
                Category = cats[random.Next(0, cats.Count)],
                IsFriendly = random.NextDouble() >= 0.8
            });
        }

        var checkCf = new ConditionalFormat((cell, cells) => { return ((Person)cell.Data).IsFriendly == true; }, (c, cs) => new Format()
        {
            BackgroundColor = "#d9fce2"
        });

        var ageCf = new ConditionalFormat((cell, cells) => (cell.GetValue<int>()) > 85, (cell, cells) => new Format() { ForegroundColor = "#ff0000" });

        var builder1 = new ObjectEditorBuilder<Person>(People, GridDirection.PropertiesAcrossColumns);
        builder1.AutogenerateProperties(false)
                .WithConditionalFormat("ageCf", ageCf)
                .WithConditionalFormat("checkCf", checkCf)
                .WithProperty(x => x.Id, pd => { pd.Heading = "Person ID"; })
                .WithProperty(x => x.FirstName, pd => { pd.Heading = "First Name"; })
                .WithProperty(x => x.LastName, pd => { pd.Heading = "Last Name"; })
                .WithProperty(x => x.Age, pd =>
                {
                    pd.UseConditionalFormat("ageCf");
                    pd.UseDataValidator(new NumberValidator(true));
                })
                .WithProperty(x => x.Category, pd =>
                {
                    pd.Heading = "Category";
                    pd.Type = "select";
                    pd.UseDataValidator(new SourceValidator(new List<string>() { "", "Manager", "Employee" }, true));
                })
                .WithProperty(x => x.IsFriendly, pd =>
                {
                    pd.UseConditionalFormat("check");
                    pd.Heading = "Is Friendly?";
                });

        var editor1 = builder1.Build();
        editor1.Sheet.ApplyConditionalFormat("checkCf", editor1.Sheet.Range);


        Sheet = editor1.Sheet;
    }

    private void HandleCellChanged(CellsChangedEventArgs e)
    {
        StateHasChanged();
    }

}