@using BlazorDatasheet.Core.Commands
@using BlazorDatasheet.Core.Data
@using Microsoft.JSInterop;
@inject IJSRuntime JS
@inject IWindowEventService _windowEventService;
@using BlazorDatasheet.Render;
@implements IDisposable;
@using BlazorDatasheet.DataStructures.Geometry
@using BlazorDatasheet.Services
@using BlazorDatasheet.Util
@using BlazorDatasheet.Menu
@inherits SheetComponentBase


<div
    @ref="_innerSheet"
    style="height:@(_cellLayoutProvider.TotalHeight)px; width: @(_cellLayoutProvider.TotalWidth)px;"
    class="@GetContainerClassString()"
    theme="@Theme"
    @onmouseover="() => IsMouseInsideSheet = true"
    @onmouseout="() => IsMouseInsideSheet = false">

    <!-- Register Menus -->
    <SelectionMenu/>

    <SheetMenuTarget
        MenuId="SelectionMenu"
        MenuData="Sheet"
        Trigger="@MenuTrigger.OnContextMenu"
        Placement="@MenuPlacement.BottomRight">
        <div>
            <!-- Column headers -->
            <div style="display: flex; flex-direction: column; justify-content: start;">

                @if (ShowColHeadings)
                {
                    <div style="display: flex; flex-direction: row;" class="sheet-row @(StickyHeadings ? "col-sticky" : "col-nonsticky")">
                        @if (ShowRowHeadings)
                        {
                            <!-- the little bit outside to the left of first col header -->
                            <div class="sheet-cell row-head column-head"
                                 style="@CssUtil.GetCellWidthStyles(-1, 1, _cellLayoutProvider); height: @(_cellLayoutProvider.ColHeadingHeight)px;
                                 display: inline-block;@(StickyHeadings ? "position: sticky; left: 0; z-index:2;" : "")">
                                <div class="cell"></div>
                            </div>
                        }
                        <div id="filler-left-0" style="min-width: @(_visualSheet.Viewport.Left)px; display: block; float: left; height: 1px;"></div>

                        <ColumnHeadingsRenderer
                            OnMouseDown="HandleColumnHeaderMouseDown"
                            OnMouseUp="HandleColumnHeaderMouseUp"
                            OnMouseOver="HandleColumnHeaderMouseOver"
                            NVisibleCols="_visualSheet.Viewport.VisibleRegion.Width"
                            VisibleColStart="_visualSheet.Viewport.VisibleRegion.Left"
                            CellLayoutProvider="_cellLayoutProvider"
                            Sheet="Sheet">
                            <HeadingRenderer>
                                @if (ColumnHeaderTemplate != null)
                                {
                                    @ColumnHeaderTemplate(context)
                                }
                                else
                                {
                                    @context.Heading?.ToString()
                                }
                            </HeadingRenderer>
                        </ColumnHeadingsRenderer>

                    </div>
                }

                <div id="filler-top" @ref="_fillerTop" style="min-height: @(_visualSheet.Viewport?.Top)px; min-width:@(_cellLayoutProvider.TotalWidth)px; display: block;"></div>

                <div id="last-row" style="display: flex; flex-direction: row;">

                    @if (ShowRowHeadings)
                    {
                        <div id="rowHeadings" class="@(StickyHeadings ? "row-sticky" : "")">
                            <RowHeadingsRenderer
                                OnMouseDown="HandleRowHeaderMouseDown"
                                OnMouseUp="HandleRowHeaderMouseUp"
                                OnMouseOver="HandleRowHeaderMouseOver"
                                NVisibleRows="_visualSheet.Viewport.VisibleRegion.Height"
                                VisibleRowStart="_visualSheet.Viewport.VisibleRegion.Top"
                                Sheet="Sheet"
                                CellLayoutProvider="_cellLayoutProvider"/>
                        </div>
                    }


                    <div id="filler-left-1" @ref="_fillerLeft1" style="float:right; min-width: @(_visualSheet.Viewport.Left)px; height: @(RenderedInnerSheetHeight)px;"></div>

                    <!-- inner sheet is the size of the visual sheet, which is resized on virtualisation -->
                    <table
                        class="sheet-table"
                        style="width:@(RenderedInnerSheetWidth)px;height: @(RenderedInnerSheetHeight)px;">

                        <colgroup>
                            @for (int i = _visualSheet.Viewport.VisibleRegion.Left; i <= _visualSheet.Viewport.VisibleRegion.Right; i++)
                            {
                                var col = i;
                                var colWidth = _cellLayoutProvider.ComputeWidth(col, 1);
                                <col style="width:@(colWidth)px; max-width:@(colWidth)px;"/>
                            }
                        </colgroup>

                        <tbody>
                        @for (int rowIndex = _visualSheet.Viewport.VisibleRegion.Top; rowIndex <= _visualSheet.Viewport.VisibleRegion.Bottom; rowIndex++)
                        {
                            var row = rowIndex;
                            var rowHeight = @_cellLayoutProvider.ComputeHeight(row, 1);

                            <tr @key="row" style="height:@(rowHeight)px">
                                @for (int j = _visualSheet.Viewport.VisibleRegion.Left; j <= _visualSheet.Viewport.VisibleRegion.Right; j++)
                                {
                                    var col = j;
                                    var cell = _visualSheet.GetVisualCell(row, col);
                                    var cellValue = cell?.Value?.ToString() ?? "";
                                    var k = col;
                                    <td
                                        @key="k"
                                        data-row="@row"
                                        data-col="@col"
                                        class="sheet-cell">
                                        @cellValue
                                    </td>
                                }
                            </tr>
                        }
                        </tbody>
                    </table>

                    <div id="filler-right" @ref="_fillerRight" style="float:left;min-width: @(_visualSheet.Viewport.DistanceRight)px; height:@(RenderedInnerSheetHeight)px;"></div>

                    <EditorOverlayRenderer
                        @ref="_editorManager"
                        Sheet="Sheet"
                        DefaultCellTypes="_defaultCellTypeDefinitions"
                        CustomCellTypes="CustomCellTypeDefinitions"
                        CellLayoutProvider="_cellLayoutProvider"/>
                </div>

                <div id="filler-bottom" @ref="_fillerBottom" style="min-height: @(_visualSheet.Viewport?.DistanceBottom)px; min-width:@(1)px;"></div>
            </div>
        </div>

    </SheetMenuTarget>

    <!-- entire size of sheet to force scrollbars. Includes width of row headers/columns-->
    <div id="sheet_whole"
         @ref="_wholeSheetDiv"
         style="position:absolute; top:0; 
                     left:0;
                     min-height:@(_cellLayoutProvider.TotalHeight)px; 
                     max-height:@(_cellLayoutProvider.TotalHeight)px; 
                     min-width:@(_cellLayoutProvider.TotalWidth)px;
                     max-width:@(_cellLayoutProvider.TotalWidth)px;
                     pointer-events: none;
                     z-index: 0;">

        <SelectionRenderer
            Sheet="Sheet"
            CellLayoutProvider="_cellLayoutProvider"/>

        <AutofillRenderer
            Sheet="Sheet"
            InputService="_sheetPointerInputService"
            CellLayoutProvider="_cellLayoutProvider"
            SelectionExpanded="HandleSelectionExpanded"/>
    </div>
</div>