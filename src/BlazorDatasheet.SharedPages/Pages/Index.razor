@page "/"
@using BlazorDatasheet.DataStructures.Geometry
@using BlazorDatasheet.Edit
@using BlazorDatasheet.Render
@using BlazorDatasheet.SharedPages.Data
@using BlazorDatasheet.Core.Data
@using BlazorDatasheet.Core.Edit
@using BlazorDatasheet.Core.Formats
@using BlazorDatasheet.Core.Validation

<PageTitle>Index</PageTitle>

<p>
    Blazor DataSheet is an excel-like editor for cellular values. Below shows some of the features of the data sheet. Sample code is available on <a href="https://github.com/anmcgrath/BlazorDatasheet">GitHub</a>
</p>

<div style="overflow-y: auto; overflow-x: scroll; height: 500px; width: 800px; border: 1px solid gray; border-radius: 8px;">
    <Datasheet
        @ref="_datasheet"
        Theme="@Theme"
        Sheet="Sheet"
        ShowColHeadings="true"
        ShowRowHeadings="false"
        StickyHeadings="true">
    </Datasheet>
</div>

<div>
    <button @onclick="InsertRowAfterSelection">Insert row</button>
    <button @onclick="InsertColAfterSelection">Insert col</button>
    <button @onclick="RemoveCol">RemoveCol</button>
    <button @onclick="RemoveRow">RemoveRow</button>
    <button @onclick="() => Sheet.Commands.Undo()">Undo</button>
    <button @onclick="() => Sheet.Commands.Redo()">Redo</button>
    <button @onclick="@(() => Sheet.Selection.Value = "Bob")">Set to Bob</button>
    <button @onclick="@(() => Sheet.SetFormat(new CellFormat() { BackgroundColor = "red" }, Sheet.Selection))">Set bg to red</button>
    <button @onclick="@(() => Sheet.SetFormat(new CellFormat() { BackgroundColor = "blue" }, Sheet.Selection))">Set bg to blue</button>
    <button @onclick="@(() => Sheet.SetFormat(new CellFormat() { ForegroundColor = "green" }, Sheet.Selection))">Set font colour to green</button>
    <button @onclick="@(() => Sheet.Cells.Merges.Add(Sheet.Selection))">Merge cells</button>
</div>

<div>
    <input id="darkmode-toggle" @onclick="() => _datasheet.ForceReRender()" type="checkbox" @bind="IsDarkMode"/>
    <label for="darkmode-toggle">Darkmode</label>
</div>

@code {

    private Sheet Sheet;
    private string Theme => IsDarkMode ? "dark" : "default";
    private bool IsDarkMode { get; set; }
    private Datasheet _datasheet;

    private void InsertRowAfterSelection()
    {
        if (Sheet.Selection.ActiveRegion == null)
        {
            return;
        }
        Sheet.InsertRowAt(Sheet.Selection.ActiveRegion.TopLeft.Row);
    }

    private void InsertColAfterSelection()
    {
        if (Sheet.Selection.ActiveRegion == null)
        {
            return;
        }
        Sheet.InsertColAt(Sheet.Selection.ActiveRegion.TopLeft.Col);
    }

    private void RemoveCol()
    {
        if (Sheet.Selection.ActiveRegion == null)
        {
            return;
        }
        Sheet.RemoveCol(Sheet.Selection.ActiveRegion.Left);
    }

    private void RemoveRow()
    {
        if (Sheet.Selection.ActiveRegion == null)
        {
            return;
        }
        Sheet.RemoveRow(Sheet.Selection.ActiveRegion.Top);
    }


    protected override void OnInitialized()
    {
        var src = new SourceValidator(new List<string>()
        {
            "Option 1",
            "Option 2"
        }, false);

        Sheet = new Sheet(100, 100);
        Sheet.Commands.PauseHistory();
        Sheet.Cells[0, 0].Data = "Hey";
        Sheet.Cells.Validation.Add(new NumberValidator(true), 4, 0);
        Sheet.Cells.Validation.Add(new NumberValidator(false), 5, 0);
        Sheet.Cells.Validation.Add(src, 1, 3);
        Sheet.Cells[5, 0].Formatting = new CellFormat() { BackgroundColor = "orange" };
        Sheet.Cells[5, 0].Formatting = new CellFormat() { BackgroundColor = "blue", ForegroundColor = "white" };
        Sheet.Cells[1, 11].Type = "datetime";
        Sheet.Cells[1, 11].Data = DateTime.Now;
        Sheet.Cells[1, 3].Type = "select";
        Sheet.Cells[1, 3].Data = src.ValidationSource[0];
        Sheet.Cells[1, 2].Type = "boolean";
        Sheet.Cells[1, 2].Data = false;
        Sheet.Commands.ResumeHistory();
    }

}