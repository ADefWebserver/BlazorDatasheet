@page "/ConditionalFormatting"
@using BlazorDatasheet.Data
@using BlazorDatasheet.Render
<PageTitle>Conditional Formatting</PageTitle>

<h1>Conditional Formatting</h1>

<p>
    This example shows two conditional formats applied to the cells in the sheet

    <ol>
        <li>Colored numbers: less than zero and the cell background is blue, greater than zero and the cell background is red</li>
        <li>Secret: If the cell's value contains the text secret, the cell's format uses a green check icon</li>
    </ol>
</p>

<Datasheet Sheet="sheet"></Datasheet>

@code {

    private Sheet sheet;

    protected override void OnInitialized()
    {
        sheet = new Sheet(4,1);
        sheet.TrySetCellValue(0, 0, 0);
        sheet.TrySetCellValue(0, 1, -100);
        sheet.TrySetCellValue(0, 2, 20);
        sheet.TrySetCellValue(0, 3, "secret");
        
        var formatTick = new ConditionalFormat(
            c => c.GetValue() != null && c.GetValue<string>().Contains("secret"),
            cell => new Format()
            {
                Icon = Icons.Icons.CheckIcon,
                IconColor = "#428739"
            });
        var coloredNums = new ConditionalFormat(
            c => c.GetValue() != null && c.GetValue<double?>() != null,
            c =>
            {
                var f = new Format();
                var val = c.GetValue<double?>();
                if (val.HasValue)
                {
                    if (val == 0)
                        f.BackgroundColor = "#ffffff";
                    else if (val > 0)
                        f.BackgroundColor = "#f5adab";
                    else
                        f.BackgroundColor = "#abecf5";
                }
                return f;
            });

        
        sheet.ConditionalFormatting.Apply(formatTick);
        sheet.ConditionalFormatting.Apply(coloredNums);

        base.OnInitialized();
    }

}