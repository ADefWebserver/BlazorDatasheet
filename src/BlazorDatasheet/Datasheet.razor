@using BlazorDatasheet.Data
@using System.Text.Encodings.Web
@using BlazorDatasheet.Interfaces
@using Microsoft.JSInterop;
@inject IJSRuntime JS
@using BlazorDatasheet.Render;
@implements IDisposable;
@using Microsoft.AspNetCore.Components.Web.Virtualization;
@using System.Collections.Immutable
@using System.Reflection
@using System.Text

<div
    style="@(IsFixedHeight ? $"max-height: {FixedHeightInPx}px;" : "")"
    class="vars sheet @(IsDataSheetActive ? "active-sheet" : "inactive-sheet")
     @(IsFixedHeight ? $" sheet-fixed-height" : "sheet-dynamic-height") "
    @onmouseover="() => IsMouseInsideSheet = true"
    @onmouseout="() => IsMouseInsideSheet = false">
    <!-- Column headers -->
    @if (Sheet?.ShowColumnHeadings == true)
    {
        <div class="sheet-row column-head @(StickyHeadings ? "header-sticky" : "")">
            @if (Sheet.ShowRowHeadings)
            {
                <!-- the little bit outside to the left of first col header -->
                <div class="sheet-cell row-head">
                    <div class="cell"/>
                </div>
            }
            <ColumnHeadingsRenderer
                Sheet="Sheet"/>
        </div>
    }

    @if (Sheet != null)
    {
        <Virtualize Items="@Sheet?.RowCollection" TItem="Row" Context="sheetRow">
            <ItemContent>
                <div class="sheet-row" @key="sheetRow.RowNumber">
                    @if (Sheet.ShowRowHeadings)
                    {
                        <div
                            class="sheet-cell row-head @(IsDataSheetActive && IsRowActive(sheetRow.RowNumber) ? "row-active" : "")"
                            @onmousedown="e => HandleRowHeaderMouseDown(sheetRow.RowNumber, e)"
                            @onmouseover="e => HandleCellMouseOver(sheetRow.RowNumber, -1, e)"
                            @onmouseup="e => HandleCellMouseUp(sheetRow.RowNumber, -1, e)">
                            @(Sheet.RowHeadings.Count > sheetRow.RowNumber ? Sheet.RowHeadings[sheetRow.RowNumber].Header : null)
                            <div class="cell" style="text-align: right">
                                @sheetRow.RowNumber
                            </div>
                        </div>
                    }
                    @for (int j = 0; j < Sheet?.NumCols; j++)
                    {
                        var row = sheetRow.RowNumber;
                        var col = j;

                        var cell = Sheet.GetCell(row, col);
                        var conditionalFormatting = Sheet.ConditionalFormatting.GetFormat(row, col);

                        Format format;
                        if (cell.Formatting != null)
                        {
                            format = cell.Formatting;
                            format.Merge(conditionalFormatting);
                        }
                        else
                        {
                            format = conditionalFormatting;
                        }


                        <!-- The cell content -->

                        <div
                            class="sheet-cell"
                            @onmousedown="e => HandleCellMouseDown(row, col, e)"
                            @onmouseover="e => HandleCellMouseOver(row, col, e)"
                            @ondblclick="e => HandleCellDoubleClick(row, col, e)"
                            @onmouseup="e => HandleCellMouseUp(row, col, e)">

                            <div
                                class="cell"
                                style="@GetCellStyleFromFormat(format, cell.IsValid)
                                                                ">
                                @if (format?.Icon != null)
                                {
                                    <div style="margin-right:2px; color: @(format.IconColor ?? "var(--icon-color)");">@format.Icon</div>
                                }
                                <DynamicComponent
                                    Type="@getCellRendererType(cell.Type)"
                                    Parameters="@getCellRendererParameters(cell, row, col)">
                                </DynamicComponent>
                            </div>

                        </div>
                    }
                </div>
            </ItemContent>
        </Virtualize>

        @if (_editorManager.IsEditing)
        {
            <div style="position:absolute; @GetEditorSizeStyling()">
                <DynamicComponent
                    Type="_editorManager.ActiveEditorType"
                    Parameters="@getEditorParameters()"
                    @ref="_editorManager.ActiveEditorContainer"/>
            </div>
        }

        <SelectionRenderer
            TempSelection="TempSelection"
            Sheet="Sheet"
            CellLayoutProvider="_cellLayoutProvider"/>
    }
</div>

@code{

    private string GetCellStyleFromFormat(Format? cellFormat, bool isValid)
    {
        var foreGroundVar = isValid ? "--sheet-foreground-color" : "--invalid-cell-foreground-color";
        var sb = new StringBuilder();
        sb.Append($"background-color:{cellFormat?.BackgroundColor ?? "var(--sheet-bg-color)"};");
        sb.Append($"color:{cellFormat?.ForegroundColor ?? $"var({foreGroundVar})"};");
        sb.Append($"font-weight:{cellFormat?.FontWeight ?? "var(--sheet-font-weight)"};");
        return sb.ToString();
    }

}