@using System.Text
@using BlazorDatasheet.Data
@using BlazorDatasheet.Edit.DefaultComponents
@using BlazorDatasheet.Interfaces
@using BlazorDatasheet.Render
@using System.Reflection.Metadata
@using BlazorDatasheet.Events.Edit
@using BlazorDatasheet.Formula.Core
@using BlazorDatasheet.FormulaEngine

@if (IsEditing)
{
    <div style="position:absolute; @GetEditorSizeStyling()">
        <DynamicComponent
            Type="@ActiveEditorType"
            Parameters="@GetDynamicEditorParameters()"
            @ref="ActiveEditorContainer"/>
    </div>
}


@code {

    [Parameter, EditorRequired]
    public Sheet Sheet { get; set; }

    [Parameter, EditorRequired]
    public Dictionary<string, CellTypeDefinition> CustomCellTypes { get; set; }

    [Parameter, EditorRequired]
    public Dictionary<string, CellTypeDefinition> DefaultCellTypes { get; set; }

    private Sheet? _sheet;

    [Parameter]
    public CellLayoutProvider CellLayoutProvider { get; set; }

    /// The type of the active editor, which is an ICellEditor
    private Type? ActiveEditorType { get; set; } = typeof(TextEditorComponent);

    /// Whether the Editor is currently editing
    internal bool IsEditing { get; private set; }

    internal IReadOnlyCell EditCell { get; private set; }

    // The currently edited value
    internal string? EditValue { get; private set; }

    /// Whether the edit is "soft" which means that it can be accepted with arrow navigation
    internal bool IsSoftEdit { get; private set; }

    /// The current edit entry mode
    private EditEntryMode EditEntryMode { get; set; }

    /// The key that was pressed to enter the edit
    private string EditEntryKey { get; set; }

    /// The current cell editor component
    private BaseEditor ActiveCellEditor;

    private bool BeginningEdit { get; set; }

    /// The Dynamic component holding the Active Editor component
    internal DynamicComponent? ActiveEditorContainer { get; set; }

    protected override void OnParametersSet()
    {
        if (_sheet != Sheet)
        {
            if (_sheet != null)
            {
                _sheet.Editor.EditBegin -= EditorOnEditBegin;
                _sheet.Editor.EditFinished -= EditorOnEditFinished;
            }
            _sheet = Sheet;
            _sheet.Editor.EditBegin += EditorOnEditBegin;
            _sheet.Editor.EditFinished += EditorOnEditFinished;
        }
        base.OnParametersSet();
    }

    private void EditorOnEditBegin(object? sender, EditBeginEventArgs e)
    {
        EditValue = e.EditValue;
        ActiveEditorType = GetEditorType(e.Type);
        IsEditing = true;
        IsSoftEdit = e.IsSoftEdit;
        EditEntryMode = e.Mode;
        EditCell = e.Cell;
        EditEntryKey = e.Key ?? string.Empty;
        BeginningEdit = true;
        StateHasChanged();
    }

    private Type GetEditorType(string cellType)
    {
        if (CustomCellTypes.ContainsKey(cellType))
            return CustomCellTypes[cellType].EditorType;

        if (DefaultCellTypes.ContainsKey(cellType))
            return DefaultCellTypes[cellType].EditorType;

        return typeof(TextEditorComponent);
    }

    private void EditorOnEditFinished(object? sender, EditFinishedEventArgs e)
    {
        clearCurrentEdit();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (BeginningEdit)
        {
            ActiveCellEditor = (BaseEditor)(ActiveEditorContainer.Instance);
            if (ActiveCellEditor == null)
                return;

            ActiveCellEditor.BeforeEdit(EditCell, Sheet);
            ActiveCellEditor.RequestCancelEdit += HandleEditorRequestCancelEdit;
            ActiveCellEditor.RequestAcceptEdit += HandleEditorRequestAcceptEdit;
            ActiveCellEditor.BeginEdit(EditEntryMode, EditValue, EditEntryKey);
            if (EditEntryMode != EditEntryMode.None)
                await ActiveCellEditor.Focus();
            ActiveCellEditor.Render();
            BeginningEdit = false;
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public bool HandleKeyDown(string key, bool ctrlKey, bool shiftKey, bool altKey, bool metaKey)
    {
        if (!IsEditing)
            return false;

        if (ActiveCellEditor == null)
            return false;

        return ActiveCellEditor.HandleKey(key, ctrlKey, shiftKey, altKey, metaKey);
    }

    private void HandleEditorRequestCancelEdit(object? sender, EventArgs args)
    {
        _sheet?.Editor.CancelEdit();
    }

    private void HandleEditorRequestAcceptEdit(object? sender, EventArgs args)
    {
        _sheet?.Editor.AcceptEdit();
    }

    private void clearCurrentEdit()
    {
        if (ActiveCellEditor != null)
        {
            ActiveCellEditor.RequestCancelEdit -= HandleEditorRequestCancelEdit;
            ActiveCellEditor.RequestAcceptEdit -= HandleEditorRequestAcceptEdit;
        }

        this.IsEditing = false;
        StateHasChanged();
    }

    /// <summary>
    /// Calculates the top/left/width/height styles of the editor container
    /// </summary>
    /// <returns></returns>
    private string GetEditorSizeStyling()
    {
        var strBuilder = new StringBuilder();
        var left = CellLayoutProvider.ComputeLeftPosition(EditCell.Col, Sheet.ShowRowHeadings);
        var top = CellLayoutProvider.ComputeTopPosition(EditCell.Row, Sheet.ShowColumnHeadings);

        var mergedPosn = Sheet.Merges.Get(EditCell.Row, EditCell.Col);
        int colSpan = 1;
        int rowSpan = 1;

        if (mergedPosn != null)
        {
            colSpan = mergedPosn.Width;
            rowSpan = mergedPosn.Height;
        }

        var w = CellLayoutProvider.ComputeWidth(EditCell.Col, colSpan);
        var h = CellLayoutProvider.ComputeHeight(rowSpan);

        strBuilder.Append($"left:{left}px;");
        strBuilder.Append($"top:{top}px;");
        strBuilder.Append($"width:{w}px;");
        strBuilder.Append($"height:{h}px;");
        strBuilder.Append("box-shadow: 0px 0px 4px var(--shadow-overlay-color)");
        var style = strBuilder.ToString();
        return style;
    }


    private IDictionary<string, object> GetDynamicEditorParameters()
    {
        return new Dictionary<string, object>()
        {
            { "Value", _sheet.Editor.EditValue },
            { "OnValueChanged", EventCallback.Factory.Create<string>(this, HandleEditValueChanged) }
        };
    }

    private void HandleEditValueChanged(string newValue)
    {
        Sheet.Editor.EditValue = newValue;
    }

}