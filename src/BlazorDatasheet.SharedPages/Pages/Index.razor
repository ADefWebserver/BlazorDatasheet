@page "/"
@using BlazorDatasheet.Data
@using BlazorDatasheet.Edit
@using BlazorDatasheet.Formats
@using BlazorDatasheet.FormulaEngine
@using BlazorDatasheet.ObjectEditor
@using BlazorDatasheet.Validation
@using BlazorDatasheet.Render
@using BlazorDatasheet.Selecting
@using BlazorDatasheet.SharedPages.Data

<PageTitle>Index</PageTitle>

<p>
    Blazor DataSheet is an excel-like editor for cellular values. Below shows some of the features of the data sheet. Sample code is available on <a href="https://github.com/anmcgrath/BlazorDatasheet">GitHub</a>
</p>

<input type="text" value="@_currentEditValue" @onfocus="OnEditorFocus" @oninput="OnEditorChange"/>
<button @onclick="@(() => Sheet.Editor.EditValue = "Bpb")"></button>

@Sheet.Editor.EditValue

<div style="overflow-y: auto; overflow-x: scroll; height: 600px; width: 600px;">
    <Datasheet
        @ref="_datasheet"
        Theme="@Theme"
        Sheet="Sheet"
        StickyHeadings="true">
    </Datasheet>
</div>

<div>
    <button @onclick="InsertRowAfterSelection">Insert row</button>
    <button @onclick="InsertColAfterSelection">Insert col</button>
    <button @onclick="RemoveCol">RemoveCol</button>
    <button @onclick="RemoveRow">RemoveRow</button>
    <button @onclick="() => Sheet.Commands.Undo()">Undo</button>
    <button @onclick="() => Sheet.Commands.Redo()">Redo</button>
    <button @onclick="@(() => Sheet.Selection.Value = "Bob")">Set to Bob</button>
    <button @onclick="@(() => Sheet.SetFormat(new CellFormat() { BackgroundColor = "red" }, Sheet.Selection))">Set bg to red</button>
    <button @onclick="@(() => Sheet.SetFormat(new CellFormat() { BackgroundColor = "blue" }, Sheet.Selection))">Set bg to blue</button>
    <button @onclick="@(() => Sheet.SetFormat(new CellFormat() { ForegroundColor = "green" }, Sheet.Selection))">Set font colour to green</button>
    <button @onclick="@(() => Sheet.Merges.Add(Sheet.Selection))">Merge cells</button>
</div>

<div>
    <input id="darkmode-toggle" @onclick="() => _datasheet.ForceReRender()" type="checkbox" @bind="IsDarkMode"/>
    <label for="darkmode-toggle">Darkmode</label>
</div>

@code {

    private Sheet Sheet;
    private string _currentEditValue;
    private string Theme => IsDarkMode ? "dark" : "default";
    private bool IsDarkMode { get; set; }
    private Datasheet _datasheet;

    private void InsertRowAfterSelection()
    {
        if (Sheet.Selection.ActiveRegion == null)
        {
            return;
        }
        Sheet.InsertRowAt(Sheet.Selection.ActiveRegion.TopLeft.Row);
    }

    private void InsertColAfterSelection()
    {
        if (Sheet.Selection.ActiveRegion == null)
        {
            return;
        }
        Sheet.InsertColAt(Sheet.Selection.ActiveRegion.TopLeft.Col);
    }

    private void RemoveCol()
    {
        if (Sheet.Selection.ActiveRegion == null)
        {
            return;
        }
        Sheet.RemoveCol(Sheet.Selection.ActiveRegion.Left);
    }

    private void RemoveRow()
    {
        if (Sheet.Selection.ActiveRegion == null)
        {
            return;
        }
        Sheet.RemoveRow(Sheet.Selection.ActiveRegion.Top);
    }


    protected override void OnInitialized()
    {
        var src = new SourceValidator(new List<string>()
        {
            "Option 1",
            "Option 2"
        }, false);

        Sheet = new Sheet(300, 300);
        Sheet.TrySetCellValue(0, 0, "Hey");
        Sheet.ShowColumnHeadings = false;
        Sheet.ShowRowHeadings = false;
        Sheet.Validation.Add(new NumberValidator(true), 4, 0);
        Sheet.SetFormat(new CellFormat() { BackgroundColor = "blue", ForegroundColor = "white" }, Sheet.Range(4, 0));
        Sheet.Validation.Add(new NumberValidator(false), 5, 0);
        Sheet.SetFormat(new CellFormat() { BackgroundColor = "orange" }, Sheet.Range(5, 0));

        Sheet.Selection.SelectionChanged += (sender, regions) =>
        {
            var selection = (Selection)sender;
            if (selection?.ActiveRegion != null)
            {
                var row = selection.ActiveCellPosition.Row;
                var col = selection.ActiveCellPosition.Col;
                if (Sheet.FormulaEngine.HasFormula(row, col))
                    _currentEditValue = Sheet.FormulaEngine.GetFormulaString(row, col);
                else
                    _currentEditValue = Sheet.GetValue(selection.ActiveCellPosition.Row, selection.ActiveCellPosition.Col)?.ToString();
                this.StateHasChanged();
            }
        };

        Sheet.Validation.Add(src, 1, 3);
        Sheet.SetCell(1, 1, new Cell(DateTime.Now) { Type = "datetime" });
        Sheet.SetCell(1, 2, new Cell(false) { Type = "boolean" });
        Sheet.SetCell(1, 3, new Cell(src.ValidationSource[0]) { Type = "select" });

        Sheet.Editor.EditValueChanged += (sender, s) =>
        {
            _currentEditValue = Sheet.Editor.EditValue;
            StateHasChanged();
        };
    }

    private void OnEditorChange(ChangeEventArgs e)
    {
        _currentEditValue = e.Value.ToString();
        Sheet.Editor.EditValue = _currentEditValue;
        _datasheet.ForceReRender();
    }

    private void OnEditorFocus(FocusEventArgs obj)
    {
        if (!Sheet.Editor.IsEditing && Sheet.Selection.ActiveRegion != null)
        {
            var row = Sheet.Selection.ActiveCellPosition.Row;
            var col = Sheet.Selection.ActiveCellPosition.Col;
            Sheet.Editor.BeginEdit(row, col, false, EditEntryMode.None);
        }
    }

}