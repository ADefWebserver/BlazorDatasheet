@page "/"
@using BlazorDatasheet.Data
@using BlazorDatasheet.Wasm.Data
@using BlazorDatasheet.Icons
@using BlazorDatasheet.ObjectEditor
@using BlazorDatasheet.Validation
@using BlazorDatasheet.Data.Events
@using BlazorDatasheet.Render

<PageTitle>Index</PageTitle>

<h1>Blazor DataSheet examples</h1>

<p>
    Blazor DataSheet is an excel-like editor for cellular values. Below shows some of the features of the data sheet. Sample code is available on <a href="https://github.com/anmcgrath/BlazorDatasheet">GitHub</a>
</p>

<Datasheet
    Sheet="Sheet"
    IsFixedHeight="true"/>


<div>
    <button @onclick="InsertAtSelection">Insert row at selection</button>
    <button @onclick="() => Sheet.Commands.Undo()">Undo</button>
    <button @onclick="() => Sheet.Commands.Redo()">Redo</button>
</div>

@code{

    private Sheet Sheet;
    private Sheet Sheet2;
    private List<Person> People { get; set; }
    private ObjectEditor<Person> _editor;

    private void InsertAtSelection()
    {
        if (Sheet.Selection.ActiveRange == null)
        {
            return;
        }
        _editor.InsertAt(new Person(), Sheet.Selection.ActiveRange.Start.Row);
        //Sheet.InsertRowAt(Sheet2.Selection.ActiveRange.Start.Row);
    }

    protected override void OnInitialized()
    {
        Sheet2 = new Sheet(3, 3);
        People = new List<Person>();

        var random = new Random();

        var firstNames = new List<string>() { "Myah", "Jaeden", "Evelin", "Riya", "Isiah", "Alannah", "Mohamed", "Gavyn", "Leo", "Carley", "Sloane" };
        var lastNames = new List<string>() { "Walters", "Hall", "Smith", "Parker", "Velasquez", "Mccall", "Farmer", "Boone", "Fitzpatrick", "Mcclain", "Mccoy", "Baker" };
        var cats = new List<string>() { "Manager", "Employee" };

        for (int i = 0; i < 100; i++)
        {
            People.Add(new Person()
            {
                Id = i,
                Age = random.Next(100).ToString(),
                FirstName = firstNames[random.Next(0, firstNames.Count)],
                LastName = lastNames[random.Next(0, lastNames.Count)],
                Category = cats[random.Next(0, cats.Count)],
                IsFriendly = i % 2 == 0
            });
        }

        var checkCf = new ConditionalFormat(cell =>
        {
            var person = ((Person)cell.Data);
            if (person == null)
                return false;
            return person.IsFriendly;
        }, c => new Format()
        {
            BackgroundColor = "#d9fce2"
        });

        var ageCf =
            new ConditionalFormat(
                cell => (cell.GetValue<int?>()) > 85, cell => new Format() { ForegroundColor = "#ff0000" });

        var builder1 = new ObjectEditorBuilder<Person>(People, GridDirection.PropertiesAcrossColumns);
        builder1.AutogenerateProperties(false)
            .WithConditionalFormat("ageCf", ageCf)
            .WithConditionalFormat("checkCf", checkCf)
            .WithProperty(x => x.Id, pd => { pd.Heading = "Person ID"; })
            .WithProperty(x => x.FirstName, pd => { pd.Heading = "First Name"; })
            .WithProperty(x => x.LastName, pd => { pd.Heading = "Last Name"; })
            .WithProperty(x => x.Age, pd =>
            {
                pd.UseConditionalFormat("ageCf");
                pd.UseDataValidator(new NumberValidator(true));
            })
            .WithProperty(x => x.Category, pd =>
            {
                pd.Heading = "Category";
                pd.Type = "select";
                pd.UseDataValidator(new SourceValidator(new List<string>() { "", "Manager", "Employee" }, true));
            })
            .WithProperty(x => x.IsFriendly, pd =>
            {
                pd.UseConditionalFormat("check");
                pd.Heading = "Is Friendly?";
            });

        _editor = builder1.Build();
        _editor.Sheet.ConditionalFormatting.Apply("checkCf", _editor.Sheet.Range);

        Sheet = _editor.Sheet;
    }

}