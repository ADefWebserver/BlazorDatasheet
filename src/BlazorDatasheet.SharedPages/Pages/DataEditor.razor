@page "/dataeditor"
@using BlazorDatasheet.Core.Interfaces
@using BlazorDatasheet.Core.Validation
@using BlazorDatasheet.Formula.Core
@using BlazorDatasheet.Render
@using BlazorDatasheet.Core.Data
@using BlazorDatasheet.Core.Formats
@using BlazorDatasheet.Core.FormulaEngine

@using Microsoft.Data.SqlClient
@using Radzen
@using Radzen.Blazor
@using Radzen.Blazor.Rendering
@using System.Text;
@using System.Data
@inject DialogService DialogService

<PageTitle>Data Editor</PageTitle>

<h1>Data Editor</h1>
<RadzenLabel Text=@ErrorMessage />
<br />
<div class="rz-p-sm-1" style="background-color:whitesmoke;border-block:thin;border-block-color:lightgray;text-align:left">
    <ToolBarEditorButton Click=@btnSave Disabled=@SavingDisabled Icon="save" IconColor="black" />
    <span style="border-right: 2px solid #D3D3D3;" />
    <ToolBarEditorButton Click="() => sheet.Commands.Undo()" Icon="undo" IconColor="black" Title="Undo" />
    <ToolBarEditorButton Click="() => sheet.Commands.Redo()" Icon="redo" IconColor="black" Title="Redo" />
    <span style="border-right: 2px solid #D3D3D3;" />
    <ToolBarEditorButton Click=@InsertRowAfterSelection Icon="input" IconColor="black" Title="Insert Row" />
    <ToolBarEditorButton Click=@RemoveRow Icon="logout" IconColor="black" Title="Delete Row" />
    <span style="border-right: 2px solid #D3D3D3;" />
    <span>&nbsp; Table: </span>
    <RadzenDropDown @bind-Value=@selectedTable Data=@tableNames Change=@(args => LoadTableData(args.ToString())) Style="width: 300px; border-block:hidden" Name="DropDownBindValue" />
    <span>&nbsp;</span>
    <span style="border-right: 2px solid #D3D3D3;" />
    <RadzenCheckBox @bind-Value=@UseValidation Name="CheckBoxValidation" /><RadzenLabel Text="Validators" Component="CheckBoxValidation" Style="margin-left: 8px; vertical-align: middle;" />
    <ToolBarEditorButton Click=@btnExport Icon="download_for_offline" IconColor="black" Title="Export" />
    <ToolBarEditorButton Click="@ShowInlineDialog" Icon="settings" IconColor="black" Title="Settings" />
</div>

@if (isLoading)
{
    <div class="rz-p-sm-1" style="background-color:whitesmoke;border-block:thin;border-block-color:lightgray;text-align:left">
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
        <span>Processing...</span>
    </div>
}
else
{
    <div style="overflow: scroll; width: 800px; height: 400px;">

        <Datasheet ShowColHeadings="true"
                   ShowRowHeadings="true"
                   Sheet="sheet" />

    </div>
}

@code {
#nullable disable
    private Sheet sheet;

    bool isLoading = false;
    bool UseValidation = false;
    bool SavingDisabled = false;
    string ErrorMessage = "";
    string selectedTable = "";
    string strConnectionString = "";

    List<string> tableNames = new List<string> { };
    List<DTODatabaseColumn> TableColumns = new List<DTODatabaseColumn>();

    string DatabaseConnectionString = "";

    protected override void OnInitialized()
    {
        sheet = new Sheet(numRows: 100000, numCols: 20000);
    }

    protected override async Task OnInitializedAsync()
    {
        // Wait 1 second before loading the table data
        // to join the UI thread
        await Task.Delay(1000);

        await ShowInlineDialog();
    }

    #region Datasheet Events
    private void btnSave()
    {
        if(SavingDisabled)
        {
            return;
        }

        try
        {
            SaveData();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.GetBaseException().Message;
        }
    }

    private void btnExport()
    {
        ErrorMessage = "Export button clicked";
    }

    private void InsertRowAfterSelection()
    {
        if (sheet.Selection.ActiveRegion == null)
        {
            return;
        }

        sheet.Rows.InsertRowAt(sheet.Selection.ActiveRegion.TopLeft.row);
    }

    private void RemoveRow()
    {
        if (sheet.Selection.ActiveRegion == null)
        {
            return;
        }

        sheet.Rows.RemoveAt(sheet.Selection.ActiveRegion.Top);
    }
    #endregion

    // ********************************************************************************************************************
    // Database Connection
    // ********************************************************************************************************************

    private ConnectionSetting connectionSetting = new ConnectionSetting();
    string IntegratedSecurityDisplay = "True";
    List<string> OptionsTrueFalse = new List<string>() { "True", "False" };
    string strStatusMessage = "";
    bool boolProcessing = false;

    private string DatabaseName = "AdventureWorksLT2019";
    private string ServerName = "(local)";
    private string DatabaseUsername = "";
    private string DatabasePassword = "";

    #region Classes
    public class ConnectionSetting
    {
        public string DatabaseName { get; set; }
        public string ServerName { get; set; }
        public bool IntegratedSecurity { get; set; }
        public string Username { get; set; }
        public string Password { get; set; }
    }

    public class DTOStatus
    {
        public string StatusMessage { get; set; }
        public bool Success { get; set; }
    }

    public class DTODatabaseColumn
    {
        public string ColumnName { get; set; }
        public string ColumnType { get; set; }
        public int ColumnLength { get; set; }
        public bool IsPrimaryKey { get; set; }
    }
    #endregion

    #region async Task ShowInlineDialog()
    async Task ShowInlineDialog()
    {
        var result = await DialogService.OpenAsync("Database Connection", ds =>
    @<RadzenStack Gap="1.5rem">
        <table class="form-group" cellpadding="4" cellspacing="4">
            <tbody>
                <tr>
                    <td>
                        <label for="Title" class="control-label" style="font-weight: bold">Server: </label>
                    </td>
                    <td>
                        <input type="text" id="ServerName" class="form-control" @bind="ServerName" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label for="Title" class="control-label" style="font-weight: bold">Database: </label>
                    </td>
                    <td>
                        <input type="text" id="DatabaseName" class="form-control" @bind="DatabaseName" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label for="Title" class="control-label" style="font-weight: bold">Integrated Security: </label>
                    </td>
                    <td>
                        <RadzenDropDown @bind-Value=@IntegratedSecurityDisplay Data=@OptionsTrueFalse Style="width: 300px;" Change=@(() => UpdateDialog(ds)) />
                    </td>
                </tr>
                @if (IntegratedSecurityDisplay == "False")
            {
                <tr>
                    <td>
                        <label for="Title" class="control-label" style="font-weight: bold">Database Username: </label>
                    </td>
                    <td>
                        <input type="text" id="DatabaseUsername" class="form-control" @bind="DatabaseUsername" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label for="Title" class="control-label" style="font-weight: bold">Database Password: </label>
                    </td>
                    <td>
                        <input type="password" id="DatabasePassword" class="form-control" @bind="DatabasePassword" />
                    </td>
                </tr>
            }
            </tbody>
        </table>

        <table class="form-group" cellpadding="4" cellspacing="4">
            <tbody>
                <tr>
                    <td>
                        @if (boolProcessing == false)
                    {
                        <button type="button" label="Set Database Connection"
                                class="btn btn-success"
                                @onclick=@(() => setConnection(ds))>
                            Set Connection
                        </button>
                    }
                    else
                    {
                        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
                        <span>Processing...</span>
                    }
                    </td>
                </tr>
            </tbody>
        </table>

        <h4>@strStatusMessage</h4>
    </RadzenStack>
           );
    }
    #endregion

    #region async Task ShowPrimaryKeyWarningDialog()
    async Task ShowPrimaryKeyWarningDialog()
    {
        var result = await DialogService.OpenAsync("Primary Key Warning", ds =>
    @<RadzenStack Gap="1.5rem">
        <table class="form-group" cellpadding="4" cellspacing="4">
            <tbody>
                <tr>
                    <td>
                        <label style="font-weight: bold">Table has no Primay Key - Saving will be disabled</label>
                    </td>
                </tr>
            </tbody>
        </table>

        <table class="form-group" cellpadding="4" cellspacing="4">
            <tbody>
                <tr>
                    <td>
                        <button type="button" label="Set Database Connection"
                                class="btn btn-success"
                                @onclick=@(() => ds.Close())>
                            Ok
                        </button>
                    </td>
                </tr>
            </tbody>
        </table>
    </RadzenStack>
    );
    }
    #endregion

    #region private void UpdateDialog(DialogService paramDS)
    private void UpdateDialog(DialogService paramDS)
    {
        strStatusMessage = "";
        paramDS.Refresh();
    }
    #endregion

    #region private async Task setConnection(DialogService paramDS)
    private async Task setConnection(DialogService paramDS)
    {
        boolProcessing = true;
        strStatusMessage = "";

        paramDS.Refresh();

        connectionSetting.DatabaseName = DatabaseName;
        connectionSetting.IntegratedSecurity = Convert.ToBoolean(IntegratedSecurityDisplay);
        connectionSetting.Password = DatabasePassword;
        connectionSetting.ServerName = ServerName;
        connectionSetting.Username = DatabaseUsername;

        var result = SetConnectionSetting(connectionSetting);

        if (result.Success)
        {
            paramDS.Close();
            await GetTablesInDatabase();
        }
        else
        {
            strStatusMessage = result.StatusMessage;
        }

        boolProcessing = false;
        StateHasChanged();
    }
    #endregion

    #region private void GetTablesInDatabase()
    private async Task GetTablesInDatabase()
    {
        tableNames = new List<string>();

        // Use the DatabaseConnectionString to get the tables in the database
        using (SqlConnection connection = new SqlConnection(DatabaseConnectionString))
        {
            connection.Open();

            // Get the tables in the database
            DataTable dt = connection.GetSchema("Tables");

            // Get the table names
            foreach (DataRow row in dt.Rows)
            {
                // Ensure that the table is not a system table
                if (row[3].ToString() == "BASE TABLE")
                {
                    string tablename = $"{(string)row[1]}.{(string)row[2]}";
                    tableNames.Add(tablename);
                }
            }

            connection.Close();

            // order the table names
            tableNames.Sort();

            // Set the value to the first table
            if (tableNames.Count > 0)
            {
                selectedTable = tableNames[0];
            }

            if (selectedTable != "")
            {
                isLoading = true;
                StateHasChanged();

                // Wait 1 second before loading the table data
                // to join the UI thread
                await Task.Delay(1000);

                await LoadTableData(selectedTable);

                isLoading = false;
                StateHasChanged();
            }
        }
    }
    #endregion

    #region private async Task LoadTableData(string paramSelectedTable)
    private async Task LoadTableData(string paramSelectedTable)
    {
        selectedTable = paramSelectedTable;

        isLoading = true;
        StateHasChanged();

        // Use the DatabaseConnectionString to get the data from the selected table
        using (SqlConnection connection = new SqlConnection(DatabaseConnectionString))
        {
            connection.Open();

            try
            {
                // Get the primary keys for the table
                List<string> PrimaryKeys = GetPrimaryKey(connection, selectedTable);

                // Get a list of the column names
                TableColumns = new List<DTODatabaseColumn>();

                DataTable Columns = connection.GetSchema("Columns");

                foreach (DataRow row in Columns.Rows)
                {
                    if ($"{row["TABLE_SCHEMA"].ToString()}.{row["TABLE_NAME"].ToString()}" == selectedTable)
                    {
                        DTODatabaseColumn objTableColumns = new DTODatabaseColumn();

                        objTableColumns.ColumnName = row["COLUMN_NAME"].ToString();
                        objTableColumns.ColumnType = row["DATA_TYPE"].ToString();

                        if (row["CHARACTER_MAXIMUM_LENGTH"] != DBNull.Value)
                        {
                            objTableColumns.ColumnLength = Convert.ToInt32(row["CHARACTER_MAXIMUM_LENGTH"]);
                        }
                        else
                        {
                            objTableColumns.ColumnLength = 0;
                        }

                        if (PrimaryKeys.Contains(row["COLUMN_NAME"].ToString()))
                        {
                            objTableColumns.IsPrimaryKey = true;
                        }
                        else
                        {
                            objTableColumns.IsPrimaryKey = false;
                        }

                        TableColumns.Add(objTableColumns);
                    }
                }

                // Get Table names from TableColumns as comma seperated values
                string strTableNames = string.Join(",", TableColumns.Select(x => $"[{x.ColumnName}]").ToArray());

                // Get the data from the selected table
                string sql = $"SELECT {strTableNames} FROM {selectedTable}";
                SqlDataAdapter adapter = new SqlDataAdapter(sql, connection);
                DataTable dt = new DataTable();
                adapter.Fill(dt);

                connection.Close();

                // See if there are any primary keys
                if (PrimaryKeys.Count == 0)
                {
                    SavingDisabled = true;
                    await ShowPrimaryKeyWarningDialog();
                }
                else
                {
                    SavingDisabled = false;
                }   

                // Create Table Headers
                SetTableHeadersAndData(TableColumns, dt);
            }
            catch (Exception ex)
            {
                ErrorMessage = ex.GetBaseException().Message;

                if (connection.State == ConnectionState.Open)
                {
                    connection.Close();
                }

                isLoading = false;
                StateHasChanged();
            }
        }

        isLoading = false;
        StateHasChanged();
    }
    #endregion

    #region private void SetTableHeadersAndData(List<DTODatabaseColumn> paramDatabaseColumns, DataTable paramDataTable)
    private void SetTableHeadersAndData(List<DTODatabaseColumn> paramDatabaseColumns, DataTable paramDataTable)
    {
        // Create sheet with the number of columns
        sheet = new Sheet(paramDataTable.Rows.Count, paramDatabaseColumns.Count);

        // Turn off history
        sheet.BatchUpdates();
        sheet.Commands.PauseHistory();

        int i = 0;
        foreach (DTODatabaseColumn objDatabaseColumn in paramDatabaseColumns)
        {
            sheet.Columns.SetHeadings(i, i, objDatabaseColumn.ColumnName);
            i++;
        }

        int ii = 0;
        foreach (DataRow dataRow in paramDataTable.Rows)
        {
            i = 0;
            foreach (DTODatabaseColumn objDatabaseColumn in paramDatabaseColumns)
            {
                sheet.Cells[ii, i].Value = dataRow[i].ToString();
                sheet.Cells[ii, i].Type = objDatabaseColumn.ColumnType;

                // Integer Validator
                if (objDatabaseColumn.ColumnType.Contains("int"))
                {
                    if (UseValidation)
                    {
                        sheet.Validators.Add(ii, i, new NumberValidator(false));
                    }
                }

                // Length Validator
                if (objDatabaseColumn.ColumnLength > 0)
                {
                    if (objDatabaseColumn.ColumnType.Contains("char"))
                    {
                        if (UseValidation)
                        {
                            sheet.Validators.Add(ii, i, new LengthValidator(objDatabaseColumn.ColumnLength, true));
                        }
                    }
                }

                if (objDatabaseColumn.IsPrimaryKey)
                {
                    sheet.Cells[ii, i].Format = new CellFormat() { IsReadOnly = true };
                }

                i++;
            }

            ii++;
        }

        // Turn on history
        sheet.EndBatchUpdates();
        sheet.Commands.ResumeHistory();
    }
    #endregion

    // Save Data

    #region private void SaveData()
    private void SaveData()
    {
        // Convert sheet data to a DataTable
        DataTable dtInsert = ConvertSheetToDataTable(sheet);

        // table.Columns.Add(nameof(Person.Id), typeof(string));
        // table.Columns.Add(nameof(Person.Name), typeof(string));
        // table.Columns.Add(nameof(Person.BirthDate), typeof(DateTime));
        // table.Columns.Add(nameof(Person.FavoriteMovie), typeof(string));
        // table.Columns.Add(nameof(Person.FavoriteNumber), typeof(int));

        // foreach (var person in people)
        // {
        //     var row = table.NewRow();
        //     row[nameof(Person.Id)] = person.Id.ToString();
        //     row[nameof(Person.Name)] = person.Name;
        //     row[nameof(Person.BirthDate)] = GetDBValue(person.BirthDate);
        //     row[nameof(Person.FavoriteMovie)] = person.FavoriteMovie;
        //     row[nameof(Person.FavoriteNumber)] = GetDBValue(person.FavoriteNumber);
        //     table.Rows.Add(row);
        // }

        using (var bulkInsert = new SqlBulkCopy(strConnectionString))
        {
            bulkInsert.DestinationTableName = dtInsert.TableName;
            bulkInsert.WriteToServer(dtInsert);
        }
    }
    #endregion

    #region private DataTable ConvertSheetToDataTable(Sheet sheet)
    private DataTable ConvertSheetToDataTable(Sheet sheet)
    {
        DataTable dt = new DataTable();

        dt.TableName = selectedTable;

        // Add columns
        for (int i = 0; i < sheet.NumCols; i++)
        {
            dt.Columns.Add(sheet.Columns.GetHeading(i), GetColumnType(sheet.Cells[0, i].ValueType));
        }

        // Add rows
        for (int i = 0; i < sheet.NumRows; i++)
        {
            DataRow row = dt.NewRow();

            for (int j = 0; j < sheet.NumCols; j++)
            {
                row[j] = sheet.Cells[i, j].Value;
            }

            dt.Rows.Add(row);
        }

        return dt;
    }
    #endregion

    // Utility

    #region public DTOStatus SetConnectionSetting(ConnectionSetting objConnectionSetting)
    public DTOStatus SetConnectionSetting(ConnectionSetting objConnectionSetting)
    {
        // The return message
        DTOStatus objDTOStatus = new DTOStatus();
        objDTOStatus.Success = true;

        // Create a Database connection string
        strConnectionString = CreateDatabaseConnectionString(objConnectionSetting);

        // Test the database connection string
        if (DatabaseConnectionValid(strConnectionString))
        {
            try
            {
                objDTOStatus.Success = true;
            }
            catch (Exception ex)
            {
                // appsettings.json file update error
                objDTOStatus.Success = false;
                objDTOStatus.StatusMessage = ex.GetBaseException().Message;
            }
        }
        else
        {
            // Bad connection setting
            objDTOStatus.Success = false;
            objDTOStatus.StatusMessage = "Connection settings are not valid";
        }

        // Return the result
        return objDTOStatus;
    }
    #endregion

    #region private string CreateDatabaseConnectionString(ConnectionSetting objConnectionSetting)
    private string CreateDatabaseConnectionString(ConnectionSetting objConnectionSetting)
    {
        StringBuilder SB = new StringBuilder();
        string strConnectionString = "";

        string strUserInfo = (!objConnectionSetting.IntegratedSecurity) ?
            String.Format("uid={0};pwd={1}",
            objConnectionSetting.Username,
            objConnectionSetting.Password) :
            "integrated security=True";

        strConnectionString = String.Format("{0}data source={1};initial catalog={2};{3};TrustServerCertificate=True",
            SB.ToString(),
            objConnectionSetting.ServerName,
            objConnectionSetting.DatabaseName,
            strUserInfo);

        return strConnectionString;
    }
    #endregion

    #region private bool DatabaseConnectionValid(string strConnectionString)
    private bool DatabaseConnectionValid(string strConnectionString)
    {
        bool boolDatabaseConnectionValid = false;

        // Try to connect to the database

        try
        {
            using (SqlConnection connection = new SqlConnection(strConnectionString))
            {
                connection.Open();
                boolDatabaseConnectionValid = true;
                DatabaseConnectionString = strConnectionString;
            }
        }
        catch
        {
            boolDatabaseConnectionValid = false;
        }

        return boolDatabaseConnectionValid;
    }
    #endregion

    #region public List<string> GetPrimaryKey(SqlConnection connection, string tableName)
    public List<string> GetPrimaryKey(SqlConnection connection, string tableName)
    {
        List<string> PrimaryKeys = new List<string>();

        try
        {
            string query = $@"
                    SELECT c.Name
                    FROM sys.index_columns ic
                    INNER JOIN sys.columns c ON ic.object_id = c.object_id AND ic.column_id = c.column_id
                    INNER JOIN sys.indexes i ON i.object_id = ic.object_id AND i.index_id = ic.index_id
                    WHERE i.is_primary_key = 1 AND ic.object_id = OBJECT_ID('{tableName}')";

            using (SqlCommand command = new SqlCommand(query, connection))
            {
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    if (reader.Read())
                    {
                        if (reader["Name"] != DBNull.Value)
                        {
                            PrimaryKeys.Add(reader["Name"].ToString());
                        }
                    }
                }
            }
        }
        catch { }

        return PrimaryKeys;
    }
    #endregion

    #region public System.Type GetColumnType(CellValueType cellValueType)
    public System.Type GetColumnType(CellValueType cellValueType)
    {
        switch (cellValueType)
        {
            case CellValueType.Text:
                return typeof(string);
            case CellValueType.Number:
                return typeof(int);
            case CellValueType.Date:
                return typeof(DateTime);
            default:
                return typeof(string);
        }
    }
    #endregion

    // Validators

    #region private class LengthValidator : IDataValidator
    private class LengthValidator : IDataValidator
    {
        private readonly int _length;
        public bool IsStrict { get; }
        public string Message => $"Maximum length is {_length}";

        public LengthValidator(int Length, bool isStrict)
        {
            IsStrict = isStrict;
            _length = Length;
        }

        public bool IsValid(CellValue value)
        {
            if (value.ValueType != CellValueType.Text)
                return false;

            var str = (string)value.Data!;
            return str.Length <= _length;
        }
    }
    #endregion
}