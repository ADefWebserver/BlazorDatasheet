@page "/"
@using BlazorDatasheet.DataStructures.Geometry
@using BlazorDatasheet.Edit
@using BlazorDatasheet.Render
@using BlazorDatasheet.SharedPages.Data
@using BlazorDatasheet.Core.Data
@using BlazorDatasheet.Core.Edit
@using BlazorDatasheet.Core.Formats
@using BlazorDatasheet.Core.Validation

<PageTitle>Index</PageTitle>

<p>
    Blazor DataSheet is an excel-like editor for cellular values. Below shows some of the features of the data sheet. Sample code is available on <a href="https://github.com/anmcgrath/BlazorDatasheet">GitHub</a>
</p>

<div style="overflow-y: auto; overflow-x: scroll; height: 500px; width: 800px;">
    <Datasheet
        @ref="_datasheet"
        Theme="@Theme"
        Sheet="Sheet"
        StickyHeadings="true">
    </Datasheet>
</div>

<div>
    <button @onclick="InsertRowAfterSelection">Insert row</button>
    <button @onclick="InsertColAfterSelection">Insert col</button>
    <button @onclick="RemoveCol">RemoveCol</button>
    <button @onclick="RemoveRow">RemoveRow</button>
    <button @onclick="() => Sheet.Commands.Undo()">Undo</button>
    <button @onclick="() => Sheet.Commands.Redo()">Redo</button>
    <button @onclick="@(() => Sheet.Selection.Value = "Bob")">Set to Bob</button>
    <button @onclick="@(() => Sheet.SetFormat(new CellFormat() { BackgroundColor = "red" }, Sheet.Range(new ColumnRegion(Sheet.Selection.ActiveCellPosition.Col))))">Set bg to red</button>
    <button @onclick="@(() => Sheet.SetFormat(new CellFormat() { BackgroundColor = "blue" }, Sheet.Selection))">Set bg to blue</button>
    <button @onclick="@(() => Sheet.SetFormat(new CellFormat() { ForegroundColor = "green" }, Sheet.Selection))">Set font colour to green</button>
    <button @onclick="@(() => Sheet.Merges.Add(Sheet.Selection))">Merge cells</button>

    <input type="range" min="0" max="10" step="0.05" @oninput="@(e => Sheet.FormulaEngine.SetVariable("x", e.Value))"/>
</div>

<div>
    <input id="darkmode-toggle" @onclick="() => _datasheet.ForceReRender()" type="checkbox" @bind="IsDarkMode"/>
    <label for="darkmode-toggle">Darkmode</label>
</div>

@code {

    private Sheet Sheet;
    private string _currentEditValue;
    private string Theme => IsDarkMode ? "dark" : "default";
    private bool IsDarkMode { get; set; }
    private Datasheet _datasheet;
    private ElementReference _cellbar;

    private void InsertRowAfterSelection()
    {
        if (Sheet.Selection.ActiveRegion == null)
        {
            return;
        }
        Sheet.InsertRowAt(Sheet.Selection.ActiveRegion.TopLeft.Row);
    }

    private void InsertColAfterSelection()
    {
        if (Sheet.Selection.ActiveRegion == null)
        {
            return;
        }
        Sheet.InsertColAt(Sheet.Selection.ActiveRegion.TopLeft.Col);
    }

    private void RemoveCol()
    {
        if (Sheet.Selection.ActiveRegion == null)
        {
            return;
        }
        Sheet.RemoveCol(Sheet.Selection.ActiveRegion.Left);
    }

    private void RemoveRow()
    {
        if (Sheet.Selection.ActiveRegion == null)
        {
            return;
        }
        Sheet.RemoveRow(Sheet.Selection.ActiveRegion.Top);
    }


    protected override void OnInitialized()
    {
        var src = new SourceValidator(new List<string>()
        {
            "Option 1",
            "Option 2"
        }, false);

        Sheet = new Sheet(10, 10);
        Sheet.Commands.PauseHistory();
        Sheet.SetCellValue(0, 0, "Hey");
        Sheet.SetColumnWidth(0, 10, 50);
        Sheet.Validation.Add(new NumberValidator(true), 4, 0);
        Sheet.SetFormat(new CellFormat() { BackgroundColor = "blue", ForegroundColor = "white" }, Sheet.Range(4, 0));
        Sheet.Validation.Add(new NumberValidator(false), 5, 0);
        Sheet.SetFormat(new CellFormat() { BackgroundColor = "orange" }, Sheet.Range(5, 0));
        Sheet.Validation.Add(src, 1, 3);
        Sheet.SetCell(1, 1, new Cell(DateTime.Now) { Type = "datetime" });
        Sheet.SetCell(1, 2, new Cell(false) { Type = "boolean" });
        Sheet.SetCell(1, 3, new Cell(src.ValidationSource[0]) { Type = "select" });
        for (int i = 0; i < 10; i++)
        {
            for (int j = 0; j < 10; j++)
            {
                Sheet.FormulaEngine.SetFormulaString(i, j, $"=(1+sin(({i/10.0}+{j/10.0})*3.14-x))/2");
            }
        }
        var colorCf = new ConditionalFormat(
            (posn, sheet) => true,
            cell =>
            {
                var parse = double.TryParse(cell.GetValue<string>(), out var val);
                if (!parse)
                    return new CellFormat();
                return new CellFormat()
                {
                    BackgroundColor = getColour(val, 0, 1, 0.5)
                };
            });
        Sheet.ConditionalFormatting.Apply(colorCf, new Region(0, 10, 0, 10));
        Sheet.FormulaEngine.SetVariable("x", 10);
        Sheet.Commands.ResumeHistory();
    }

    private string getColour(double? value, double min, double max, double mean)
    {
        if (value == null)
            value = 0;
        byte R;
        byte G;
        byte B;
        var size = Math.Abs(max - min);
        var frac = (value - min) / size;
        R = (byte)(255 * frac);
        G = (byte)(255 * frac);
        B = (byte)(255 * frac);
        var str = $"rgb({R},{G},{B})";
        return str;
    }


    private void OnEditorChange(ChangeEventArgs e)
    {
        _currentEditValue = e.Value.ToString();
        Sheet.Editor.EditValue = _currentEditValue;
        _datasheet.ForceReRender();
    }

    private void OnEditorFocus(FocusEventArgs obj)
    {
        if (!Sheet.Editor.IsEditing && Sheet.Selection.ActiveRegion != null)
        {
            var row = Sheet.Selection.ActiveCellPosition.Row;
            var col = Sheet.Selection.ActiveCellPosition.Col;
            Sheet.Editor.BeginEdit(row, col, false, EditEntryMode.None);
        }
    }

}