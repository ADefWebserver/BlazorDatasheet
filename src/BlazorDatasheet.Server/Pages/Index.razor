@page "/"
@using BlazorDatasheet.Data
@using BlazorDatasheet.Server.Data
@using BlazorDatasheet.Icons
@using BlazorDatasheet.ObjectEditor
@using BlazorDatasheet.Validation
@using BlazorDatasheet.Data.Events
@using BlazorDatasheet.Render

<PageTitle>Index</PageTitle>

<h1>Blazor DataSheet examples</h1>

<p>
    Blazor DataSheet is an excel-like editor for cellular values. Below shows some of the features of the data sheet. Sample code is available on <a href="https://github.com/anmcgrath/BlazorDatasheet">GitHub</a>
</p>

<Datasheet
    Sheet="Sheet"
    IsFixedHeight="true"
    OnCellsChanged="HandleCellChanged">

</Datasheet>

@code{

    private Sheet Sheet;
    private List<Person> People { get; set; }

    protected override void OnInitialized()
    {
        People = new List<Person>();

        var random = new Random();
        for (int i = 0; i < 100; i++)
        {
            People.Add(new Person() { Id = i, Age = random.NextInt64(100).ToString(), FirstName = "Person", LastName = "Person" });
        }

        var checkCf = new ConditionalFormat((cell, cells) => { return ((Person)cell.Data).IsFriendly == true; }, (c, cs) => new Format()
        {
            BackgroundColor = "#D9F8C4",
            Icon = Icons.CheckIcon
        });

        var builder1 = new ObjectEditorBuilder<Person>(People, GridDirection.PropertiesAcrossColumns);
        builder1.AutogenerateProperties(true)
                .WithProperty(x => x.FirstName, pd =>
                {
                    pd.Heading = "First Name";
                    pd.UseConditionalFormat("ageCf");
                    pd.UseConditionalFormat("check");
                })
                .WithProperty(x => x.Age, pd => { pd.UseDataValidator(new NumberValidator(true)); })
                .WithProperty(x => x.Category, pd =>
                {
                    pd.Heading = "Category";
                    pd.Type = "select";
                    pd.UseDataValidator(new SourceValidator(new List<string>() { "", "Manager", "Employee" }, true));
                })
                .WithProperty(x => x.Id, pd => { pd.Heading = "Person ID"; })
                .WithConditionalFormat("check", checkCf)
                .WithProperty(x => x.IsFriendly, pd => { pd.UseConditionalFormat("check"); });

        var editor1 = builder1.Build();


        Sheet = editor1.Sheet;
    }

    private void HandleCellChanged(CellsChangedEventArgs e)
    {
        StateHasChanged();
    }

}