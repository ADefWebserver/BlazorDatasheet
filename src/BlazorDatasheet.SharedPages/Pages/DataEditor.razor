@page "/dataeditor"
@using BlazorDatasheet.Render
@using BlazorDatasheet.Core.Data
@using BlazorDatasheet.Core.Formats
@using BlazorDatasheet.Core.FormulaEngine

@using Microsoft.Data.SqlClient
@using Radzen
@using Radzen.Blazor
@using Radzen.Blazor.Rendering
@using System.Text;
@using System.Data
@inject DialogService DialogService

<PageTitle>Data Editor</PageTitle>

<h1>Data Editor</h1>
<RadzenLabel Text=@ErrorMessage />
<br />
<div class="rz-p-sm-1" style="background-color:whitesmoke;border-block:thin;border-block-color:lightgray;text-align:left">
    <ToolBarEditorButton Click=@btnSave Icon="save" IconColor="black" />
    <span style="border-right: 2px solid #D3D3D3;" />
    <ToolBarEditorButton Click="() => sheet.Commands.Undo()" Icon="undo" IconColor="black" Title="Undo" />
    <ToolBarEditorButton Click="() => sheet.Commands.Redo()" Icon="redo" IconColor="black" Title="Redo" />
    <span style="border-right: 2px solid #D3D3D3;" />
    <ToolBarEditorButton Click=@InsertRowAfterSelection Icon="input" IconColor="black" Title="Insert Row" />
    <ToolBarEditorButton Click=@RemoveRow Icon="logout" IconColor="black" Title="Delete Row" />
    <span style="border-right: 2px solid #D3D3D3;" />
    <ToolBarEditorButton Click=@InsertColAfterSelection Icon="file_upload" IconColor="black" Title="Insert Column" />
    <ToolBarEditorButton Click=@RemoveCol Icon="download" IconColor="black" Title="Delete Column" />
    <span style="border-right: 2px solid #D3D3D3;" />
    <span>&nbsp; Table: </span>
    <RadzenDropDown @bind-Value=@selectedTable Data=@tableNames Change=@(args => LoadTableData(args.ToString())) Style="width: 300px; border-block:hidden" Name="DropDownBindValue" />
    <span>&nbsp;</span>
    <span style="border-right: 2px solid #D3D3D3;" />
    <ToolBarEditorButton Click=@btnExport Icon="download_for_offline" IconColor="black" Title="Export" />
    <ToolBarEditorButton Click="@ShowInlineDialog" Icon="settings" IconColor="black" Title="Settings" />
</div>

<div style="overflow: scroll; width: 800px; height: 400px;">

    <Datasheet ShowColHeadings="true"
               ShowRowHeadings="true"
               Sheet="sheet" />

</div>

@code {
#nullable disable
    private Sheet sheet;

    string ErrorMessage = "";
    string selectedTable = "";
    new List<string> tableNames = new List<string> { };

    string DatabaseConnectionString = "";

    protected override void OnInitialized()
    {
        sheet = new Sheet(numRows: 100000, numCols: 20000);
    }

    protected override async Task OnInitializedAsync()
    {

    }

    #region Datasheet Events
    private void btnSave()
    {
        ErrorMessage = "Save button clicked";
    }

    private void btnExport()
    {
        ErrorMessage = "Export button clicked";
    }

    private void InsertRowAfterSelection()
    {
        if (sheet.Selection.ActiveRegion == null)
        {
            return;
        }

        sheet.Rows.InsertRowAt(sheet.Selection.ActiveRegion.TopLeft.row);
    }

    private void InsertColAfterSelection()
    {
        if (sheet.Selection.ActiveRegion == null)
        {
            return;
        }

        sheet.Columns.InsertAt(sheet.Selection.ActiveRegion.TopLeft.col);
    }

    private void RemoveCol()
    {
        if (sheet.Selection.ActiveRegion == null)
        {
            return;
        }

        sheet.Columns.RemoveAt(sheet.Selection.ActiveRegion.Left);
    }

    private void RemoveRow()
    {
        if (sheet.Selection.ActiveRegion == null)
        {
            return;
        }

        sheet.Rows.RemoveAt(sheet.Selection.ActiveRegion.Top);
    }
    #endregion

    // ********************************************************************************************************************
    // Database Connection
    // ********************************************************************************************************************

    private ConnectionSetting connectionSetting = new ConnectionSetting();
    string IntegratedSecurityDisplay = "True";
    List<string> OptionsTrueFalse = new List<string>() { "True", "False" };
    string strStatusMessage = "";
    bool boolProcessing = false;

    private string DatabaseName = "AdventureWorks2012";
    private string ServerName = "(local)";
    private string DatabaseUsername = "";
    private string DatabasePassword = "";

    #region Classes
    public class ConnectionSetting
    {
        public string DatabaseName { get; set; }
        public string ServerName { get; set; }
        public bool IntegratedSecurity { get; set; }
        public string Username { get; set; }
        public string Password { get; set; }
    }

    public class DTOStatus
    {
        public string StatusMessage { get; set; }
        public bool Success { get; set; }
    }
    #endregion

    #region async Task ShowInlineDialog()
    async Task ShowInlineDialog()
    {
        var result = await DialogService.OpenAsync("Database Connection", ds =>
    @<RadzenStack Gap="1.5rem">
        <table class="form-group" cellpadding="4" cellspacing="4">
            <tbody>
                <tr>
                    <td>
                        <label for="Title" class="control-label" style="font-weight: bold">Server: </label>
                    </td>
                    <td>
                        <input type="text" id="ServerName" class="form-control" @bind="ServerName" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label for="Title" class="control-label" style="font-weight: bold">Database: </label>
                    </td>
                    <td>
                        <input type="text" id="DatabaseName" class="form-control" @bind="DatabaseName" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label for="Title" class="control-label" style="font-weight: bold">Integrated Security: </label>
                    </td>
                    <td>
                        <RadzenDropDown @bind-Value=@IntegratedSecurityDisplay Data=@OptionsTrueFalse Style="width: 300px;" Change=@(() => UpdateDialog(ds)) />
                    </td>
                </tr>
                @if (IntegratedSecurityDisplay == "False")
            {
                <tr>
                    <td>
                        <label for="Title" class="control-label" style="font-weight: bold">Database Username: </label>
                    </td>
                    <td>
                        <input type="text" id="DatabaseUsername" class="form-control" @bind="DatabaseUsername" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label for="Title" class="control-label" style="font-weight: bold">Database Password: </label>
                    </td>
                    <td>
                        <input type="password" id="DatabasePassword" class="form-control" @bind="DatabasePassword" />
                    </td>
                </tr>
            }
            </tbody>
        </table>

        <table class="form-group" cellpadding="4" cellspacing="4">
            <tbody>
                <tr>
                    <td>
                        @if (boolProcessing == false)
                    {
                        <button type="button" label="Set Database Connection"
                                class="btn btn-success"
                                @onclick=@(() => setConnection(ds))>
                            Set Connection
                        </button>
                    }
                    else
                    {
                        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
                        <span>Processing...</span>
                    }
                    </td>
                </tr>
            </tbody>
        </table>

        <h4>@strStatusMessage</h4>
    </RadzenStack>
    );
    }
    #endregion

    #region private void UpdateDialog(DialogService paramDS)
    private void UpdateDialog(DialogService paramDS)
    {
        strStatusMessage = "";
        paramDS.Refresh();
    }
    #endregion

    #region private void setConnection(DialogService paramDS)
    private void setConnection(DialogService paramDS)
    {
        boolProcessing = true;
        strStatusMessage = "";

        paramDS.Refresh();

        connectionSetting.DatabaseName = DatabaseName;
        connectionSetting.IntegratedSecurity = Convert.ToBoolean(IntegratedSecurityDisplay);
        connectionSetting.Password = DatabasePassword;
        connectionSetting.ServerName = ServerName;
        connectionSetting.Username = DatabaseUsername;

        var result = SetConnectionSetting(connectionSetting);

        if (result.Success)
        {
            paramDS.Close();
            GetTablesInDatabase();
        }
        else
        {
            strStatusMessage = result.StatusMessage;
        }

        boolProcessing = false;
        StateHasChanged();
    }
    #endregion

    #region private void GetTablesInDatabase()
    private void GetTablesInDatabase()
    {
        // Use the DatabaseConnectionString to get the tables in the database
        using (SqlConnection connection = new SqlConnection(DatabaseConnectionString))
        {
            connection.Open();

            // Get the tables in the database
            DataTable dt = connection.GetSchema("Tables");

            // Get the table names
            foreach (DataRow row in dt.Rows)
            {
                // Ensure that the table is not a system table
                if (row[3].ToString() == "BASE TABLE")
                {
                    string tablename = $"{(string)row[1]}.{(string)row[2]}";
                    tableNames.Add(tablename);
                }
            }

            connection.Close();

            // order the table names
            tableNames.Sort();

            // Set the value to the first table
            if (tableNames.Count > 0)
            {
                selectedTable = tableNames[0];
            }

            if (selectedTable != "")
            {
                LoadTableData(selectedTable);
            }
        }
    }
    #endregion

    #region private void LoadTableData(string paramSelectedTable)
    private void LoadTableData(string paramSelectedTable)
    {
        selectedTable = paramSelectedTable;
        // Use the DatabaseConnectionString to get the data from the selected table
        using (SqlConnection connection = new SqlConnection(DatabaseConnectionString))
        {
            connection.Open();

            // Get the data from the selected table
            string sql = "SELECT * FROM " + selectedTable;
            SqlDataAdapter adapter = new SqlDataAdapter(sql, connection);
            DataTable dt = new DataTable();
            adapter.Fill(dt);

            // Load the data into the datasheet
            

            connection.Close();
        }
    }
    #endregion

    // Utility

    #region public DTOStatus SetConnectionSetting(ConnectionSetting objConnectionSetting)
    public DTOStatus SetConnectionSetting(ConnectionSetting objConnectionSetting)
    {
        // The return message
        DTOStatus objDTOStatus = new DTOStatus();
        objDTOStatus.Success = true;

        // Create a Database connection string
        string strConnectionString = CreateDatabaseConnectionString(objConnectionSetting);

        // Test the database connection string
        if (DatabaseConnectionValid(strConnectionString))
        {
            try
            {
                objDTOStatus.Success = true;
            }
            catch (Exception ex)
            {
                // appsettings.json file update error
                objDTOStatus.Success = false;
                objDTOStatus.StatusMessage = ex.GetBaseException().Message;
            }
        }
        else
        {
            // Bad connection setting
            objDTOStatus.Success = false;
            objDTOStatus.StatusMessage = "Connection settings are not valid";
        }

        // Return the result
        return objDTOStatus;
    }
    #endregion

    #region private string CreateDatabaseConnectionString(ConnectionSetting objConnectionSetting)
    private string CreateDatabaseConnectionString(ConnectionSetting objConnectionSetting)
    {
        StringBuilder SB = new StringBuilder();
        string strConnectionString = "";

        string strUserInfo = (!objConnectionSetting.IntegratedSecurity) ?
            String.Format("uid={0};pwd={1}",
            objConnectionSetting.Username,
            objConnectionSetting.Password) :
            "integrated security=True";

        strConnectionString = String.Format("{0}data source={1};initial catalog={2};{3};TrustServerCertificate=True",
            SB.ToString(),
            objConnectionSetting.ServerName,
            objConnectionSetting.DatabaseName,
            strUserInfo);

        return strConnectionString;
    }
    #endregion

    #region private bool DatabaseConnectionValid(string strConnectionString)
    private bool DatabaseConnectionValid(string strConnectionString)
    {
        bool boolDatabaseConnectionValid = false;

        // Try to connect to the database

        try
        {
            using (SqlConnection connection = new SqlConnection(strConnectionString))
            {
                connection.Open();
                boolDatabaseConnectionValid = true;
                DatabaseConnectionString = strConnectionString;
            }
        }
        catch
        {
            boolDatabaseConnectionValid = false;
        }

        return boolDatabaseConnectionValid;
    }
    #endregion
}