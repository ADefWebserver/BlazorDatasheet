@using System.Text
@using BlazorDatasheet.Data
@using BlazorDatasheet.Render
@using Range = BlazorDatasheet.Data.Range

@if (SelectionRange != null && !Hidden)
{
    if (HighlightStartPosition)
    {
        var ranges = SelectionRange.Break(SelectionRange.StartPosition);
        foreach (var range in ranges)
        {
            <div class="selection-base" style="@GetSizeStyleString(range, 0, .13)">
            </div>
        }
    }
    <div class="selection-base" style="@GetSizeStyleString(SelectionRange, 2, HighlightStartPosition ? 0 : .13)">
    </div>
}


<style>
    .selection-base{
        position: absolute;
        pointer-events: none;
    }
</style>

@code {

    [Parameter, EditorRequired]
    public CellLayoutProvider CellLayoutProvider { get; set; }

    [Parameter, EditorRequired]
    public IFixedSizeRange SelectionRange { get; set; }

    [Parameter, EditorRequired]
    public bool Hidden { get; set; }

    [Parameter]
    public bool HighlightStartPosition { get; set; }

    private string GetSizeStyleString(IFixedSizeRange? range, int borderThickness, double opacity)
    {
        if (range == null)
            return "";

        var strBuilder = new StringBuilder();

        var left = CellLayoutProvider.ComputeLeftPosition(range) - borderThickness;
        var top = CellLayoutProvider.ComputeTopPosition(range) - borderThickness;
        var w = CellLayoutProvider.ComputeWidth(range) + borderThickness * 2 - 1;
        var h = CellLayoutProvider.ComputeHeight(range) + borderThickness * 2 - 1;

        strBuilder.Append($"left:{left + 1}px;");
        strBuilder.Append($"top:{top + 1}px;");
        strBuilder.Append($"width:{w}px;");
        strBuilder.Append($"height:{h}px;");

        if (borderThickness != 0)
            strBuilder.Append($"border: {borderThickness}px solid #0998e5;");

        strBuilder.Append($"background:rgba(117,183,229,{opacity});");

        var style = strBuilder.ToString();
        return style;
    }

}