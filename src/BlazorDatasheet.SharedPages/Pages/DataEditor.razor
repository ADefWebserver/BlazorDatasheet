@page "/dataeditor"
@using BlazorDatasheet.Core.Events
@using BlazorDatasheet.Core.Interfaces
@using BlazorDatasheet.Core.Validation
@using BlazorDatasheet.DataStructures.Geometry
@using BlazorDatasheet.Formula.Core
@using BlazorDatasheet.Render
@using BlazorDatasheet.Core.Data
@using BlazorDatasheet.Core.Formats
@using BlazorDatasheet.Core.FormulaEngine

@using Microsoft.Data.SqlClient
@using Radzen
@using Radzen.Blazor
@using Radzen.Blazor.Rendering
@using System.Text;
@using System.Data
@inject DialogService dialogService

<PageTitle>Data Editor</PageTitle>

<h1>Data Editor</h1>
<RadzenLabel Text=@ErrorMessage />
<br />
<div class="rz-p-sm-1" style="background-color:whitesmoke;border-block:thin;border-block-color:lightgray;text-align:left">
    <ToolBarEditorButton Click=@btnSave Disabled=@SavingDisabled Icon="save" IconColor="black" />
    <span style="border-right: 2px solid #D3D3D3;" />
    <ToolBarEditorButton Click="() => sheet.Commands.Undo()" Icon="undo" IconColor="black" Title="Undo" />
    <ToolBarEditorButton Click="() => sheet.Commands.Redo()" Icon="redo" IconColor="black" Title="Redo" />
    <span style="border-right: 2px solid #D3D3D3;" />
    <ToolBarEditorButton Click=@InsertRowAfterSelection Icon="input" IconColor="black" Title="Insert Row" />
    <ToolBarEditorButton Click=@RemoveRow Icon="logout" IconColor="black" Title="Delete Row" />
    <span style="border-right: 2px solid #D3D3D3;" />
    <span>&nbsp; Table: </span>
    <RadzenDropDown @bind-Value=@selectedTable Data=@tableNames Change=@(args => LoadTableData(args.ToString())) Style="width: 300px; border-block:hidden" Name="DropDownBindValue" />
    <span>&nbsp;</span>
    <span style="border-right: 2px solid #D3D3D3;" />
    <RadzenCheckBox @bind-Value=@UseValidation Name="CheckBoxValidation" /><RadzenLabel Text="Validators" Component="CheckBoxValidation" Style="margin-left: 8px; vertical-align: middle;" />
    <ToolBarEditorButton Click=@btnExport Icon="download_for_offline" IconColor="black" Title="Export" />
    <ToolBarEditorButton Click="@ShowInlineDialog" Icon="settings" IconColor="black" Title="Settings" />
</div>

@if (isLoading)
{
    <div class="rz-p-sm-1" style="background-color:whitesmoke;border-block:thin;border-block-color:lightgray;text-align:left">
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
        <span>Processing...</span>
    </div>
}
else
{
    <div style="overflow: scroll; width: 800px; height: 400px;">

        <Datasheet @ref="_datasheet"
            ShowColHeadings="true"
            ShowRowHeadings="true"
            Sheet="sheet" />
    </div>
}

@code {
    #nullable disable

    private Datasheet _datasheet;
    private Sheet sheet;

    bool isLoading = false;
    bool UseValidation = false;
    bool SavingDisabled = false;
    string ErrorMessage = "";
    string selectedTable = "";
    string strConnectionString = "";

    List<string> colGeneralErrors = new List<string>();

    List<string> tableNames = new List<string> { };
    List<DTODatabaseColumn> TableColumns = new List<DTODatabaseColumn>();
    List<string> PrimaryKeys = new List<string>();

    DataTable OriginalDataTable;
    DataTable CurrentDataTable;

    string DatabaseConnectionString = "";

    protected override async Task OnInitializedAsync()
    {
        sheet = new Sheet(numRows: 100000, numCols: 20000);

        await base.OnInitializedAsync();

        // Wait 1 second before loading the table data
        // to join the UI thread
        await Task.Delay(1000);

        await ShowInlineDialog();
    }


    private void CellChaged(object sender, CellDataChangedEventArgs args)
    {
        SavingDisabled = true;
    }

    #region Datasheet Events
    private async Task btnSave()
    {
        if (SavingDisabled)
        {
            await ShowPrimaryKeyWarningDialog();
            return;
        }

        try
        {
            SaveData();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.GetBaseException().Message;
        }
    }

    private void btnExport()
    {
        ErrorMessage = "Export button clicked";
    }

    private void InsertRowAfterSelection()
    {
        if (sheet.Selection.ActiveRegion == null)
        {
            return;
        }

        sheet.Rows.InsertRowAt(sheet.Selection.ActiveRegion.TopLeft.row);
    }

    private void RemoveRow()
    {
        if (sheet.Selection.ActiveRegion == null)
        {
            return;
        }

        sheet.Rows.RemoveAt(sheet.Selection.ActiveRegion.Top);
    }
    #endregion

    // ********************************************************************************************************************
    // Database Connection
    // ********************************************************************************************************************

    private ConnectionSetting connectionSetting = new ConnectionSetting();
    string IntegratedSecurityDisplay = "True";
    List<string> OptionsTrueFalse = new List<string>() { "True", "False" };
    string strStatusMessage = "";
    bool boolProcessing = false;

    private string DatabaseName = "AdventureWorks2012";
    private string ServerName = "(local)";
    private string DatabaseUsername = "";
    private string DatabasePassword = "";

    #region Classes
    public class ConnectionSetting
    {
        public string DatabaseName { get; set; }
        public string ServerName { get; set; }
        public bool IntegratedSecurity { get; set; }
        public string Username { get; set; }
        public string Password { get; set; }
    }

    public class DTOStatus
    {
        public string StatusMessage { get; set; }
        public bool Success { get; set; }
    }

    public class DTODatabaseColumn
    {
        public string ColumnName { get; set; }
        public string ColumnType { get; set; }
        public int ColumnLength { get; set; }
        public bool IsPrimaryKey { get; set; }
    }
    #endregion

    #region async Task ShowInlineDialog()
    async Task ShowInlineDialog()
    {
        var result = await dialogService.OpenAsync("Database Connection", ds =>
    @<RadzenStack Gap="1.5rem">
        <table class="form-group" cellpadding="4" cellspacing="4">
            <tbody>
                <tr>
                    <td>
                        <label for="Title" class="control-label" style="font-weight: bold">Server: </label>
                    </td>
                    <td>
                        <input type="text" id="ServerName" class="form-control" @bind="ServerName" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label for="Title" class="control-label" style="font-weight: bold">Database: </label>
                    </td>
                    <td>
                        <input type="text" id="DatabaseName" class="form-control" @bind="DatabaseName" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label for="Title" class="control-label" style="font-weight: bold">Integrated Security: </label>
                    </td>
                    <td>
                        <RadzenDropDown @bind-Value=@IntegratedSecurityDisplay Data=@OptionsTrueFalse Style="width: 300px;" Change=@(() => UpdateDialog(ds)) />
                    </td>
                </tr>
                @if (IntegratedSecurityDisplay == "False")
            {
                <tr>
                    <td>
                        <label for="Title" class="control-label" style="font-weight: bold">Database Username: </label>
                    </td>
                    <td>
                        <input type="text" id="DatabaseUsername" class="form-control" @bind="DatabaseUsername" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label for="Title" class="control-label" style="font-weight: bold">Database Password: </label>
                    </td>
                    <td>
                        <input type="password" id="DatabasePassword" class="form-control" @bind="DatabasePassword" />
                    </td>
                </tr>
            }
            </tbody>
        </table>

        <table class="form-group" cellpadding="4" cellspacing="4">
            <tbody>
                <tr>
                    <td>
                        @if (boolProcessing == false)
                    {
                        <button type="button" label="Set Database Connection"
                                class="btn btn-success"
                                @onclick=@(() => setConnection(ds))>
                            Set Connection
                        </button>
                    }
                    else
                    {
                        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
                        <span>Processing...</span>
                    }
                    </td>
                </tr>
            </tbody>
        </table>

        <h4>@strStatusMessage</h4>
    </RadzenStack>
           );
    }
    #endregion

    #region async Task ShowPrimaryKeyWarningDialog()
    async Task ShowPrimaryKeyWarningDialog()
    {
        var result = await dialogService.OpenAsync("Primary Key Warning", ds =>
    @<RadzenStack Gap="1.5rem">
        <table class="form-group" cellpadding="4" cellspacing="4">
            <tbody>
                <tr>
                    <td>
                        <label style="font-weight: bold">Table has no Primay Key - Saving will be disabled</label>
                    </td>
                </tr>
            </tbody>
        </table>

        <table class="form-group" cellpadding="4" cellspacing="4">
            <tbody>
                <tr>
                    <td>
                        <button type="button" label="Set Database Connection"
                                class="btn btn-success"
                                @onclick=@(() => ds.Close())>
                            Ok
                        </button>
                    </td>
                </tr>
            </tbody>
        </table>
    </RadzenStack>
        );
    }
    #endregion

    #region async Task ShowStatusDialog()
    async Task ShowStatusDialog()
    {
        var result = await dialogService.OpenAsync("Save Status", ds =>
    @<RadzenStack Gap="1.5rem">
        <table class="form-group" cellpadding="4" cellspacing="4">
            <tbody>
                <tr>
                    <td>
                        <label style="font-weight: bold">Saved</label>
                    </td>
                </tr>
                <tr>
                    <td>
                        <!-- Scrollable container for errors -->
                        <div style="height: 250px; overflow-y: scroll;">
                            <table>
                                @foreach(var item in colGeneralErrors)
                                {
                                    <tr>
                                        <td>
                                            <label style="font-weight: bold">@item</label>
                                        </td>
                                    </tr>
                                }
                            </table>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>

        <table class="form-group" cellpadding="4" cellspacing="4">
            <tbody>
                <tr>
                    <td>
                        <button type="button" label="Close"
                                class="btn btn-success"
                                @onclick=@(() => ds.Close())>
                            Ok
                        </button>
                    </td>
                </tr>
            </tbody>
        </table>
    </RadzenStack>
    );
    }
    #endregion

    #region private void UpdateDialog(DialogService paramDS)
    private void UpdateDialog(DialogService paramDS)
    {
        strStatusMessage = "";
        paramDS.Refresh();
    }
    #endregion

    #region private async Task setConnection(DialogService paramDS)
    private async Task setConnection(DialogService paramDS)
    {
        boolProcessing = true;
        strStatusMessage = "";

        paramDS.Refresh();

        connectionSetting.DatabaseName = DatabaseName;
        connectionSetting.IntegratedSecurity = Convert.ToBoolean(IntegratedSecurityDisplay);
        connectionSetting.Password = DatabasePassword;
        connectionSetting.ServerName = ServerName;
        connectionSetting.Username = DatabaseUsername;

        var result = SetConnectionSetting(connectionSetting);

        if (result.Success)
        {
            paramDS.Close();
            await GetTablesInDatabase();
        }
        else
        {
            strStatusMessage = result.StatusMessage;
        }

        boolProcessing = false;
        StateHasChanged();
    }
    #endregion

    #region private void GetTablesInDatabase()
    private async Task GetTablesInDatabase()
    {
        tableNames = new List<string>();

        // Use the DatabaseConnectionString to get the tables in the database
        using (SqlConnection connection = new SqlConnection(DatabaseConnectionString))
        {
            connection.Open();

            // Get the tables in the database
            DataTable dt = connection.GetSchema("Tables");

            // Get the table names
            foreach (DataRow row in dt.Rows)
            {
                // Ensure that the table is not a system table
                if (row[3].ToString() == "BASE TABLE")
                {
                    string tablename = $"[{(string)row[1]}].[{(string)row[2]}]";
                    tableNames.Add(tablename);
                }
            }

            connection.Close();

            // order the table names
            tableNames.Sort();

            // Set the value to the first table
            if (tableNames.Count > 0)
            {
                selectedTable = tableNames[0];
            }

            if (selectedTable != "")
            {
                isLoading = true;
                StateHasChanged();

                // Wait 1 second before loading the table data
                // to join the UI thread
                await Task.Delay(1000);

                await LoadTableData(selectedTable);

                isLoading = false;
                StateHasChanged();
            }
        }
    }
    #endregion

    #region private async Task LoadTableData(string paramSelectedTable)
    private async Task LoadTableData(string paramSelectedTable)
    {
        ErrorMessage = "";
        selectedTable = paramSelectedTable;

        isLoading = true;
        StateHasChanged();

        // Use the DatabaseConnectionString to get the data from the selected table
        using (SqlConnection connection = new SqlConnection(DatabaseConnectionString))
        {
            connection.Open();

            try
            {
                // Get the primary keys for the table
                PrimaryKeys = GetPrimaryKey(connection, selectedTable);

                // Get the computed columns for the table
                List<string> ComputedColumns = GetComputedColumns(connection, selectedTable);

                // Get a list of the column names
                TableColumns = new List<DTODatabaseColumn>();

                DataTable Columns = connection.GetSchema("Columns");

                foreach (DataRow row in Columns.Rows)
                {
                    if ($"[{row["TABLE_SCHEMA"].ToString()}].[{row["TABLE_NAME"].ToString()}]" == selectedTable)
                    {
                        DTODatabaseColumn objTableColumns = new DTODatabaseColumn();

                        objTableColumns.ColumnName = row["COLUMN_NAME"].ToString();
                        objTableColumns.ColumnType = row["DATA_TYPE"].ToString();

                        if (row["CHARACTER_MAXIMUM_LENGTH"] != DBNull.Value)
                        {
                            objTableColumns.ColumnLength = Convert.ToInt32(row["CHARACTER_MAXIMUM_LENGTH"]);
                        }
                        else
                        {
                            objTableColumns.ColumnLength = 0;
                        }

                        if (PrimaryKeys.Contains(row["COLUMN_NAME"].ToString()))
                        {
                            objTableColumns.IsPrimaryKey = true;
                        }
                        else
                        {
                            objTableColumns.IsPrimaryKey = false;
                        }

                        TableColumns.Add(objTableColumns);
                    }
                }

                // Remove from TableColumns any colums types of unique identifiers
                TableColumns = TableColumns.Where(x => x.ColumnType != "uniqueidentifier").ToList();

                // Remove from TableColumns any colums types of computed
                // remove colums conatined in the ComputedColumns list
                TableColumns = TableColumns.Where(x => !ComputedColumns.Contains(x.ColumnName)).ToList();

                // Get Table names from TableColumns as comma seperated values
                string strTableNames = string.Join(",", TableColumns.Select(x => $"[{x.ColumnName}]").ToArray());

                string sql = "";

                // See if there are any primary keys
                if (PrimaryKeys.Count == 0)
                {
                    SavingDisabled = true;

                    // Get the data from the selected table
                    sql = $"SELECT 0 AS _Id, {strTableNames} FROM {selectedTable}";
                }
                else
                {
                    SavingDisabled = false;

                    // Turn PrimaryKeys into a comma seperated string
                    string strPrimaryKeys = string.Join(",", PrimaryKeys.Select(x => $"[{x}]").ToArray());

                    // Get the data from the selected table
                    sql = $"SELECT ROW_NUMBER() OVER (ORDER BY {strPrimaryKeys}) AS _Id, {strTableNames} FROM {selectedTable}";
                }

                SqlDataAdapter adapter = new SqlDataAdapter(sql, connection);
                DataTable dt = new DataTable();
                adapter.Fill(dt);

                connection.Close();

                // Save the original data
                OriginalDataTable = dt.Copy();

                // Make the first column _Id
                TableColumns.Insert(0, new DTODatabaseColumn { ColumnName = "_Id", ColumnType = "int", ColumnLength = 0, IsPrimaryKey = true });

                // Load Data into the Datasheet
                LoadTableHeadersAndData(TableColumns, dt);
            }
            catch (Exception ex)
            {
                ErrorMessage = ex.GetBaseException().Message;

                if (connection.State == ConnectionState.Open)
                {
                    connection.Close();
                }

                isLoading = false;
                StateHasChanged();
            }
        }

        isLoading = false;
        StateHasChanged();
    }
    #endregion

    #region private void LoadTableHeadersAndData(List<DTODatabaseColumn> paramDatabaseColumns, DataTable paramDataTable)
    private void LoadTableHeadersAndData(List<DTODatabaseColumn> paramDatabaseColumns, DataTable paramDataTable)
    {
        // Create sheet with the number of columns
        sheet = new Sheet(paramDataTable.Rows.Count, paramDatabaseColumns.Count);

        // Turn off history
        sheet.BatchUpdates();
        sheet.Commands.PauseHistory();

        // Hide the _Id column
        sheet.Columns.SetWidth(0, 0);

        int i = 0;
        foreach (DTODatabaseColumn objDatabaseColumn in paramDatabaseColumns)
        {
            sheet.Columns.SetHeadings(i, i, objDatabaseColumn.ColumnName);

            if (UseValidation)
            {
                // Integer Validator
                if (objDatabaseColumn.ColumnType.Contains("int"))
                {
                    sheet.Validators.Add(new ColumnRegion(i), new NumberValidator(false));
                }

                // Length Validator
                if (objDatabaseColumn.ColumnLength > 0)
                {
                    if (objDatabaseColumn.ColumnType.Contains("char"))
                    {
                        sheet.Validators.Add(new ColumnRegion(i), new LengthValidator(objDatabaseColumn.ColumnLength, true));
                    }
                }
            }

            i++;
        }

        int ii = 0;
        foreach (DataRow dataRow in paramDataTable.Rows)
        {
            i = 0;
            foreach (DTODatabaseColumn objDatabaseColumn in paramDatabaseColumns)
            {
                sheet.Cells[ii, i].Value = dataRow[i].ToString();
                sheet.Cells[ii, i].Type = objDatabaseColumn.ColumnType;

                if (objDatabaseColumn.IsPrimaryKey)
                {
                    sheet.Cells[ii, i].Format = new CellFormat() { IsReadOnly = true };
                }

                i++;
            }

            ii++;
        }

        sheet.Cells.CellsChanged += CellChaged;

        // Turn on history
        sheet.EndBatchUpdates();
        sheet.Commands.ResumeHistory();

        // disable default sort
        sheet.BeforeRangeSort += (sender, args) =>
        {
            args.Cancel = true;
            var SortOptions = args.SortOptions;
        };
    }
    #endregion

    // Save Data

    #region private void SaveData()
    private void SaveData()
    {
        colGeneralErrors = new List<string>();

        // Initialize a new DataTable
        CurrentDataTable = new DataTable();

        // Define columns based on TableColumns
        foreach (var column in TableColumns)
        {
            CurrentDataTable.Columns.Add(new DataColumn(column.ColumnName, GetColumnType(column.ColumnType)));
        }

        // Populate the DataTable with rows from the sheet
        for (int i = 0; i < sheet.NumRows; i++)
        {
            DataRow row = CurrentDataTable.NewRow();

            for (int j = 0; j < TableColumns.Count; j++)
            {
                try
                {
                    string currentValue = sheet.Cells[i, j].Value?.ToString() ?? "";

                    currentValue = currentValue.Replace("\r\n", " ")
                                               .Replace("\t", " ")
                                               .Replace("\r", " ")
                                               .Replace("\n", " ")
                                               .Trim();
                    row[j] = currentValue;
                }
                catch (Exception ex)
                {
                    colGeneralErrors.Add(ex.GetBaseException().Message);
                }
            }

            CurrentDataTable.Rows.Add(row);
        }

        GetChanges();
    }
    #endregion

    #region public void GetChanges()
    public async void GetChanges()
    {
        try
        {
            // Assuming a DataColumn named "ID" is the primary key for comparison.
            var originalIds = OriginalDataTable.AsEnumerable().Select(row => row.Field<long>("_Id")).ToHashSet();
            var currentIds = CurrentDataTable.AsEnumerable().Select(row => Convert.ToInt64(row.Field<int>("_Id"))).ToHashSet();

            // #1. Find Changed Rows

            List<int> ColChangedRows = new List<int>();
            // Loop through all rows in the original data table
            foreach (DataRow rowOrg in OriginalDataTable.Rows)
            {
                // Find the corresponding row in the current data table
                DataRow? rowCur = CurrentDataTable.AsEnumerable()
                    .FirstOrDefault(r => r.Field<int>("_Id") == rowOrg.Field<long>("_Id"));

                // If the row is not found, it has been deleted
                if (rowCur != null)
                {
                    // The row has been found
                    // Check if the row has been changed
                    // Loop through each column and compare the values
                    for (int i = 0; i < OriginalDataTable.Columns.Count; i++)
                    {
                        if (rowOrg[i].ToString() != rowCur[i].ToString())
                        {
                            ColChangedRows.Add(Convert.ToInt32(rowCur[0]));
                        }
                    }
                }
            }

            // If there are changed rows
            List<string> colSQLUpdateColumns = new List<string>();
            List<string> colSQLWhereColumns = new List<string>();

            string UpdateSQLColums = "";
            string WhereSQLColums = "";

            if (ColChangedRows.Count() > 0)
            {
                // Loop through the changed rows
                foreach (int row in ColChangedRows)
                {
                    colSQLUpdateColumns = new List<string>();
                    colSQLWhereColumns = new List<string>();

                    UpdateSQLColums = "";
                    WhereSQLColums = "";

                    // Get the row based on the number
                    DataRow rowCur = CurrentDataTable.Rows[(row - 1)];

                    // Loop through the columns
                    // Start at 1 to skip the _Id column
                    for (int i = 1; i < TableColumns.Count; i++)
                    {
                        // Build a list of columns that have changed

                        // Get the column name
                        string columnName = TableColumns[i].ColumnName;

                        // Get the column type
                        string columnType = TableColumns[i].ColumnType;

                        // Get the column length
                        int columnLength = TableColumns[i].ColumnLength;

                        // Get the column value
                        string columnValue = rowCur[i].ToString();

                        // TO DO:
                        // For integers dont wrap in quotes
                        // For strings and dates wrap in quotes
                        // Trim based on column length

                        if (PrimaryKeys.Contains(columnName))
                        {
                            // This is a primary key
                            // Add to the Where clause list
                            //colSQLWhereColumns

                            if (columnType.Contains("int"))
                            {
                                colSQLWhereColumns.Add($"{columnName} = {columnValue}");
                            }
                            else
                            {
                                colSQLWhereColumns.Add($"{columnName} = '{columnValue}'");
                            }
                        }
                        else
                        {
                            // This is not a primary key
                            // Add to the list of columns to update

                            if (columnType.Contains("int"))
                            {
                                colSQLUpdateColumns.Add($"{columnName} = {columnValue}");
                            }
                            else
                            {
                                colSQLUpdateColumns.Add($"{columnName} = LEFT('{columnValue}',{columnLength})");
                            }
                        }
                    }

                    if (colSQLUpdateColumns.Count > 0)
                    {
                        UpdateSQLColums = string.Join(",", colSQLUpdateColumns.ToArray());
                        WhereSQLColums = string.Join(" AND ", colSQLWhereColumns.ToArray());

                        using (SqlConnection connection = new SqlConnection(DatabaseConnectionString))
                        {
                            try
                            {
                                connection.Open();

                                string sql = $"UPDATE {selectedTable} SET {UpdateSQLColums} WHERE {WhereSQLColums}";

                                using (SqlCommand command = new SqlCommand(sql, connection))
                                {
                                    command.ExecuteNonQuery();
                                }
                            }
                            catch (Exception ex)
                            {
                                colGeneralErrors.Add($"Error on Row {row} - {ex.GetBaseException().Message}");
                            }
                            finally
                            {
                                if (connection.State == ConnectionState.Open)
                                {
                                    connection.Close();
                                }
                            }
                        }
                    }
                }

                // #2. Find Added Rows
                var addedRows = CurrentDataTable.AsEnumerable()
                                .Where(row => !originalIds.Contains(Convert.ToInt64(row.Field<int>("_Id"))));

                // #3. Find Deleted Rows
                var deletedRows = OriginalDataTable.AsEnumerable()
                                .Where(row => !currentIds.Contains(row.Field<long>("_Id")));
            }
        }
        catch (Exception ex)
        {
            colGeneralErrors.Add(ex.GetBaseException().Message);
        }

        await ShowStatusDialog();
    }
    #endregion

    // Utility

    #region public DTOStatus SetConnectionSetting(ConnectionSetting objConnectionSetting)
    public DTOStatus SetConnectionSetting(ConnectionSetting objConnectionSetting)
    {
        // The return message
        DTOStatus objDTOStatus = new DTOStatus();
        objDTOStatus.Success = true;

        // Create a Database connection string
        strConnectionString = CreateDatabaseConnectionString(objConnectionSetting);

        // Test the database connection string
        if (DatabaseConnectionValid(strConnectionString))
        {
            try
            {
                objDTOStatus.Success = true;
            }
            catch (Exception ex)
            {
                // appsettings.json file update error
                objDTOStatus.Success = false;
                objDTOStatus.StatusMessage = ex.GetBaseException().Message;
            }
        }
        else
        {
            // Bad connection setting
            objDTOStatus.Success = false;
            objDTOStatus.StatusMessage = "Connection settings are not valid";
        }

        // Return the result
        return objDTOStatus;
    }
    #endregion

    #region private string CreateDatabaseConnectionString(ConnectionSetting objConnectionSetting)
    private string CreateDatabaseConnectionString(ConnectionSetting objConnectionSetting)
    {
        StringBuilder SB = new StringBuilder();
        string strConnectionString = "";

        string strUserInfo = (!objConnectionSetting.IntegratedSecurity) ?
            String.Format("uid={0};pwd={1}",
            objConnectionSetting.Username,
            objConnectionSetting.Password) :
            "integrated security=True";

        strConnectionString = String.Format("{0}data source={1};initial catalog={2};{3};TrustServerCertificate=True",
            SB.ToString(),
            objConnectionSetting.ServerName,
            objConnectionSetting.DatabaseName,
            strUserInfo);

        return strConnectionString;
    }
    #endregion

    #region private bool DatabaseConnectionValid(string strConnectionString)
    private bool DatabaseConnectionValid(string strConnectionString)
    {
        bool boolDatabaseConnectionValid = false;

        // Try to connect to the database

        try
        {
            using (SqlConnection connection = new SqlConnection(strConnectionString))
            {
                connection.Open();
                boolDatabaseConnectionValid = true;
                DatabaseConnectionString = strConnectionString;
            }
        }
        catch
        {
            boolDatabaseConnectionValid = false;
        }

        return boolDatabaseConnectionValid;
    }
    #endregion

    #region public List<string> GetPrimaryKey(SqlConnection connection, string tableName)
    public List<string> GetPrimaryKey(SqlConnection connection, string tableName)
    {
        List<string> PrimaryKeys = new List<string>();

        try
        {
            string query = $@"
                SELECT c.Name
                FROM sys.index_columns ic
                INNER JOIN sys.columns c ON ic.object_id = c.object_id AND ic.column_id = c.column_id
                INNER JOIN sys.indexes i ON i.object_id = ic.object_id AND i.index_id = ic.index_id
                WHERE i.is_primary_key = 1 AND ic.object_id = OBJECT_ID('{tableName}')";

            using (SqlCommand command = new SqlCommand(query, connection))
            {
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        if (reader["Name"] != DBNull.Value)
                        {
                            PrimaryKeys.Add(reader["Name"].ToString());
                        }
                    }
                }
            }
        }
        catch { }

        return PrimaryKeys;
    }
    #endregion

    #region public List<string> GetComputedColumns(SqlConnection connection, string tableName)
    public List<string> GetComputedColumns(SqlConnection connection, string tableName)
    {
        List<string> ComputedColumns = new List<string>();

        try
        {
            string query = $@"
                                SELECT name AS ColumnName
                                FROM sys.columns
                                WHERE object_id = OBJECT_ID('{tableName}') AND is_computed = 1";

            using (SqlCommand command = new SqlCommand(query, connection))
            {
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    if (reader.Read())
                    {
                        if (reader["ColumnName"] != DBNull.Value)
                        {
                            ComputedColumns.Add(reader["ColumnName"].ToString());
                        }
                    }
                }
            }
        }
        catch { }

        return ComputedColumns;
    }
    #endregion

    #region public System.Type GetColumnType(string paramType)
    public System.Type GetColumnType(string paramType)
    {
        Type ReturnType = typeof(string);

        if (paramType.Contains("int"))
        {
            return typeof(int);
        }

        if (paramType.Contains("char"))
        {
            return typeof(string);
        }

        if (paramType.Contains("date"))
        {
            return typeof(DateTime);
        }

        return ReturnType;
    }
    #endregion

    // Validators

    #region private class LengthValidator : IDataValidator
    private class LengthValidator : IDataValidator
    {
        private readonly int _length;
        public bool IsStrict { get; }
        public string Message => $"Maximum length is {_length}";

        public LengthValidator(int Length, bool isStrict)
        {
            IsStrict = isStrict;
            _length = Length;
        }

        public bool IsValid(CellValue value)
        {
            try
            {
                var str = Convert.ToString(value.Data!);
                return str.Length <= _length;
            }
            catch (Exception ex)
            {
                return true;
            }
        }
    }
    #endregion
}
