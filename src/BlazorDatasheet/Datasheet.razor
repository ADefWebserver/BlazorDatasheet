@using BlazorDatasheet.Model
@using System.Text.Encodings.Web
@using BlazorDatasheet.Interfaces
@using Microsoft.JSInterop;
@inject IJSRuntime JS
@using BlazorDatasheet.Render;
@implements IDisposable;
@inject IWindowEventService _WindowEventService;

<table
    class="sheet @(IsDataSheetActive ? "active-sheet" : "inactive-sheet")"
    @onmouseover="() => IsMouseInsideSheet = true"
    @onmouseout="() => IsMouseInsideSheet = false">
    @for (var i = 0; i < Sheet?.Rows; i++)
    {
        <tr>
            @for (int j = 0; j < Sheet?.Cols; j++)
            {
                var row = i;
                var col = j;

                var cell = Sheet.GetCell(row, col);
                var format = Sheet.GetFormat(cell);

                <td
                    class="sheet-cell"
                    @onmousedown="e => HandleCellMouseDown(row, col, e)"
                    @onmouseover="e => HandleCellMouseOver(row, col, e)"
                    @ondblclick="e => HandleCellDoubleClick(row, col, e)"
                    @onmouseup="e => HandleCellMouseUp(row, col, e)">
                    @if (ActiveCell == cell)
                    {
                        <input
                            @ref="ActiveCellInputReference"
                            @onclick="() => IsSoftEdit = false"
                            @bind="ActiveEditValue"
                            @bind:event="oninput"
                            class="cell-input"/>
                    }
                    else
                    {
                        <div
                            class="@(IsDataSheetActive && Sheet.IsSelected(row, col) ? "cell-selected" : "") cell"
                            style="
                            background: @format.BackgroundColor; 
                            color: @format.ForegroundColor;
                            font-weight: @format.FontWeight;
                            display: flex;
                            ">
                            @if (format.Icon != null)
                            {
                                <div style="margin-right:2px">@format.Icon</div>
                            }
                            <DynamicComponent
                                Type="@getCellRendererType(cell.Type)"
                                Parameters="@getCellRendererParameters(cell)">
                            </DynamicComponent>
                        </div>
                    }

                </td>
            }
        </tr>
    }
</table>