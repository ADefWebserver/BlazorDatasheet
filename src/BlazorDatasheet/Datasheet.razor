@using BlazorDatasheet.Data
@using System.Text.Encodings.Web
@using BlazorDatasheet.Interfaces
@using Microsoft.JSInterop;
@inject IJSRuntime JS
@using BlazorDatasheet.Render;
@implements IDisposable;
@using Microsoft.AspNetCore.Components.Web.Virtualization;
@using System.Collections.Immutable
@using System.Reflection

<table
    style="@(IsFixedHeight ? $"max-height: {FixedHeightInPx}px;" : "")"
    class="sheet @(IsDataSheetActive ? "active-sheet" : "inactive-sheet")
     @(IsFixedHeight ? $" sheet-fixed-height" : "sheet-dynamic-height") "
    @onmouseover="() => IsMouseInsideSheet = true"
    @onmouseout="() => IsMouseInsideSheet = false">
    <!-- Column headers -->
    @if (ShowColumnHeaders)
    {
        <tr>
            @if (ShowRowHeaders)
            {
                <td class="sheet-cell column-head row-head"></td>
            }
            @for (var i = 0; i < Sheet?.NumCols; i++)
            {
                var col = i;
                var colDefn = Sheet?.ColumnHeadings.Count > i ? Sheet?.ColumnHeadings[i] : null;
                <td
                    class="sheet-cell column-head @(IsDataSheetActive && IsColumnActive(col) ? "column-active" : "")"
                    @onmouseup="e => HandleCellMouseUp(-1, col, e)"
                    @onmouseover="e => HandleCellMouseOver(-1, col, e)"
                    @onmousedown="e => HandleColumnHeaderMouseDown(col, e)">
                    @colDefn?.Header
                </td>
            }
        </tr>
    }

    @if (Sheet != null)
    {
        <Virtualize Items="@Sheet?.RowCollection" TItem="Row" Context="sheetRow">
            <ItemContent>
                <tr @key="sheetRow.RowNumber">
                    @if (ShowRowHeaders)
                    {
                        <td
                            class="sheet-cell row-head @(IsDataSheetActive && IsRowActive(sheetRow.RowNumber) ? "row-active" : "")"
                            @onmousedown="e => HandleRowHeaderMouseDown(sheetRow.RowNumber, e)"
                            @onmouseover="e => HandleCellMouseOver(sheetRow.RowNumber, -1, e)"
                            @onmouseup="e => HandleCellMouseUp(sheetRow.RowNumber, -1, e)">
                            @(Sheet.RowHeadings.Count > sheetRow.RowNumber ? Sheet.RowHeadings[sheetRow.RowNumber].Header : null)
                        </td>
                    }
                    @for (int j = 0; j < Sheet?.NumCols; j++)
                    {
                        var row = sheetRow.RowNumber;
                        var col = j;

                        var cell = Sheet.GetCell(row, col);
                        var conditionalFormatting = Sheet.ConditionalFormatting.CalculateFormat(row, col);
                        var format = cell.Formatting.Clone();
                        format.Merge(conditionalFormatting);

                        <td
                            class="sheet-cell"
                            @onmousedown="e => HandleCellMouseDown(row, col, e)"
                            @onmouseover="e => HandleCellMouseOver(row, col, e)"
                            @ondblclick="e => HandleCellDoubleClick(row, col, e)"
                            @onmouseup="e => HandleCellMouseUp(row, col, e)">
                            <div
                                class="cell"
                                style="
                                        background: @format.BackgroundColor; 
                                        color: @(cell.IsValid ? format.ForegroundColor : "red");
                                        font-weight: @format.FontWeight;
                                        display: flex;
                                    ">
                                @if (format.Icon != null)
                                {
                                    <div style="margin-right:2px; color: @format.IconColor">@format.Icon</div>
                                }
                                <DynamicComponent
                                    Type="@getCellRendererType(cell.Type)"
                                    Parameters="@getCellRendererParameters(cell, row, col)">
                                </DynamicComponent>
                            </div>
                        </td>
                    }
                </tr>
            </ItemContent>
        </Virtualize>

        @if (_editorManager.IsEditing)
        {
            <div style="position:absolute; @GetEditorSizeStyling()">
                <DynamicComponent
                    Type="_editorManager.ActiveEditorType"
                    Parameters="@getEditorParameters()"
                    @ref="_editorManager.ActiveEditorContainer"/>
            </div>
        }
        
        <!-- render active selection -->
        @if (IsSelecting)
        {
            var activeSel = RangeSelecting!.GetIntersection(Sheet.Range);
            <SelectionRenderer
                CellLayoutProvider="_cellLayoutProvider"
                Hidden="@(!IsDataSheetActive)"
                HighlightCell="true"
                HighlightedCell="@activeSel.Start"
                SelectionRange="@activeSel"/>
        }

        <!-- render selections -->
        @foreach(var selectionRange in Sheet.Selection.Ranges)
        {
            <SelectionRenderer
                CellLayoutProvider="_cellLayoutProvider"
                Hidden="@(!IsDataSheetActive)"
                HighlightCell="@(selectionRange == Sheet.Selection.ActiveRange && !IsSelecting)"
                HighlightedCell="Sheet.Selection.ActiveCellPosition"
                SelectionRange="selectionRange"/>
        }
    }
</table>

<style>

</style>